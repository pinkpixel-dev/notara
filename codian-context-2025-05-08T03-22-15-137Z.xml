<context>
<project_tree>
├── .gitignore (0 KB)
├── CHANGELOG.md (2 KB)
├── codian-context-2025-05-07T22-22-43-360Z.xml (369 KB)
├── components.json (0 KB)
├── context.md (22 KB)
├── CONTRIBUTING.md (4 KB)
├── env-instructions.txt (1 KB)
├── eslint.config.js (1 KB)
├── image/
    └── supabase-setup-guide/
    │   └── 1746318170739.png (200 KB)
├── index.html (1 KB)
├── LICENSE (1 KB)
├── OVERVIEW.md (5 KB)
├── package.json (3 KB)
├── postcss.config.js (0 KB)
├── public/
    ├── favicon.png (176 KB)
    ├── logo.png (176 KB)
    └── robots.txt (0 KB)
├── README.md (4 KB)
├── src/
    ├── App.css (1 KB)
    ├── App.tsx (2 KB)
    ├── components/
    │   ├── ai/
    │   │   └── AiAssistant.tsx (23 KB)
    │   ├── constellation/
    │   │   └── ConstellationView.tsx (9 KB)
    │   ├── layout/
    │   │   ├── AppLayout.tsx (3 KB)
    │   │   └── Sidebar.tsx (14 KB)
    │   ├── moodboard/
    │   │   └── MoodBoard.tsx (10 KB)
    │   ├── notes/
    │   │   ├── CalendarView.tsx (8 KB)
    │   │   ├── MarkdownPreview.tsx (0 KB)
    │   │   ├── NoteEditor.tsx (4 KB)
    │   │   ├── NotesList.tsx (8 KB)
    │   │   └── TagSelector.tsx (3 KB)
    │   ├── settings/
    │   │   ├── ProfileSettings.tsx (7 KB)
    │   │   └── SettingsPage.tsx (17 KB)
    │   ├── ui-custom/
    │   │   ├── AuthDebug.tsx (5 KB)
    │   │   └── ThemeSwitcher.tsx (3 KB)
    │   └── ui/
    │   │   ├── accordion.tsx (2 KB)
    │   │   ├── alert-dialog.tsx (4 KB)
    │   │   ├── alert.tsx (2 KB)
    │   │   ├── aspect-ratio.tsx (0 KB)
    │   │   ├── avatar.tsx (1 KB)
    │   │   ├── badge.tsx (1 KB)
    │   │   ├── breadcrumb.tsx (3 KB)
    │   │   ├── button.tsx (2 KB)
    │   │   ├── calendar.tsx (3 KB)
    │   │   ├── card.tsx (2 KB)
    │   │   ├── carousel.tsx (6 KB)
    │   │   ├── chart.tsx (11 KB)
    │   │   ├── checkbox.tsx (1 KB)
    │   │   ├── collapsible.tsx (0 KB)
    │   │   ├── command.tsx (5 KB)
    │   │   ├── context-menu.tsx (7 KB)
    │   │   ├── dialog.tsx (4 KB)
    │   │   ├── drawer.tsx (3 KB)
    │   │   ├── dropdown-menu.tsx (7 KB)
    │   │   ├── form.tsx (4 KB)
    │   │   ├── hover-card.tsx (1 KB)
    │   │   ├── input-otp.tsx (2 KB)
    │   │   ├── input.tsx (1 KB)
    │   │   ├── label.tsx (1 KB)
    │   │   ├── menubar.tsx (8 KB)
    │   │   ├── navigation-menu.tsx (5 KB)
    │   │   ├── pagination.tsx (3 KB)
    │   │   ├── popover.tsx (1 KB)
    │   │   ├── progress.tsx (1 KB)
    │   │   ├── radio-group.tsx (1 KB)
    │   │   ├── resizable.tsx (2 KB)
    │   │   ├── scroll-area.tsx (2 KB)
    │   │   ├── select.tsx (6 KB)
    │   │   ├── separator.tsx (1 KB)
    │   │   ├── sheet.tsx (4 KB)
    │   │   ├── sidebar.tsx (24 KB)
    │   │   ├── skeleton.tsx (0 KB)
    │   │   ├── slider.tsx (1 KB)
    │   │   ├── sonner.tsx (1 KB)
    │   │   ├── switch.tsx (1 KB)
    │   │   ├── table.tsx (3 KB)
    │   │   ├── tabs.tsx (2 KB)
    │   │   ├── textarea.tsx (1 KB)
    │   │   ├── toast.tsx (5 KB)
    │   │   ├── toaster.tsx (1 KB)
    │   │   ├── toggle-group.tsx (2 KB)
    │   │   ├── toggle.tsx (1 KB)
    │   │   ├── tooltip.tsx (1 KB)
    │   │   └── use-toast.ts (0 KB)
    ├── context/
    │   ├── AuthContext.tsx (6 KB)
    │   ├── NotesContext.tsx (6 KB)
    │   └── NotesContextTypes.tsx (1 KB)
    ├── hooks/
    │   ├── use-mobile.tsx (1 KB)
    │   └── use-toast.ts (4 KB)
    ├── index.css (7 KB)
    ├── lib/
    │   ├── supabase.ts (3 KB)
    │   └── utils.ts (0 KB)
    ├── main.tsx (0 KB)
    ├── pages/
    │   ├── AiAssistantPage.tsx (0 KB)
    │   ├── AuthCallbackPage.tsx (4 KB)
    │   ├── AuthPage.tsx (8 KB)
    │   ├── CalendarPage.tsx (0 KB)
    │   ├── ConstellationsPage.tsx (0 KB)
    │   ├── HomePage.tsx (4 KB)
    │   ├── Index.tsx (0 KB)
    │   ├── MarkdownCheatsheetPage.tsx (26 KB)
    │   ├── MoodBoardPage.tsx (5 KB)
    │   ├── NoteViewPage.tsx (2 KB)
    │   ├── NotFound.tsx (1 KB)
    │   ├── ProfileSettingsPage.tsx (0 KB)
    │   ├── SettingsPage.tsx (0 KB)
    │   └── TagsPage.tsx (10 KB)
    ├── types/
    │   └── index.ts (1 KB)
    └── vite-env.d.ts (0 KB)
├── tailwind.config.ts (4 KB)
├── tsconfig.app.json (1 KB)
├── tsconfig.json (0 KB)
├── tsconfig.node.json (0 KB)
├── vite.config.ts (0 KB)
└── wrangler.toml (1 KB)

</project_tree>
<project_files>
<file name="App.css" path="src\App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>
<file name="main.tsx" path="src\main.tsx">
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);
</file>
<file name="index.css" path="src\index.css">
/* Import Google Fonts first */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

/* Then include Tailwind directives */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;

    --muted: 223 47% 11%;
    --muted-foreground: 215.4 16.3% 56.9%;

    --accent: 216 34% 17%;
    --accent-foreground: 210 40% 98%;

    --popover: 224 71% 4%;
    --popover-foreground: 215 20.2% 65.1%;

    --border: 216 34% 17%;
    --input: 216 34% 17%;

    --card: 224 71% 4%;
    --card-foreground: 213 31% 91%;

    --primary: 258 90% 74%;
    --primary-foreground: 210 40% 98%;

    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;

    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;

    --ring: 258 90% 74%;

    --radius: 0.5rem;
    
    /* Cosmic Theme Colors */
    --cosmos-stardust: 258 90% 74%;
    --cosmos-nebula: 210 90% 45%;
    --cosmos-aurora: 170 90% 45%;
    --cosmos-solar: 35 90% 55%;
    --cosmos-nova: 300 90% 60%;
  }

  /* Deep Space Theme (Default) */
  .theme-deepspace {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;
    --primary: 258 90% 74%;
    --ring: 258 90% 74%;
    --cosmos-highlight: 258 90% 74%;
  }

  /* Nebula Theme */
  .theme-nebula {
    --background: 225 70% 3%;
    --foreground: 213 31% 91%;
    --primary: 210 90% 45%;
    --ring: 210 90% 45%;
    --cosmos-highlight: 210 90% 45%;
  }

  /* Emerald Galaxy Theme */
  .theme-emerald {
    --background: 223 70% 3%;
    --foreground: 213 31% 91%;
    --primary: 160 84% 39%;
    --ring: 160 84% 39%;
    --cosmos-highlight: 160 84% 39%;
  }

  /* Ultraviolet Theme */
  .theme-ultraviolet {
    --background: 280 70% 5%;
    --foreground: 213 31% 91%;
    --primary: 300 90% 60%;
    --ring: 300 90% 60%;
    --cosmos-highlight: 300 90% 60%;
  }

  /* Solar Theme (Light) */
  .theme-solar {
    --background: 0 0% 98%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 30 95% 55%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 72.22% 50.59%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 30 95% 55%;
    --cosmos-highlight: 30 95% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  
  html, body {
    height: 100%;
    overflow: hidden;
  }
  
  body {
    @apply bg-background text-foreground font-sans overflow-hidden;
    font-family: 'Poppins', sans-serif;
  }
  
  #root {
    height: 100%;
  }
}

.hover-glow:hover {
  filter: drop-shadow(0 0 5px hsl(var(--primary)));
}

.cosmic-glow {
  box-shadow: 0 0 15px 2px hsla(var(--primary), 0.3);
}

.btn-glow {
  box-shadow: 0 0 10px 1px hsla(var(--primary), 0.3);
}

.btn-glow:hover {
  box-shadow: 0 0 15px 3px hsla(var(--primary), 0.4);
}

.nebula-glow {
  box-shadow: 0 0 15px 2px hsla(var(--cosmos-nebula), 0.3);
}

.nova-glow {
  box-shadow: 0 0 15px 2px hsla(var(--cosmos-nova), 0.3);
}

.solar-glow {
  box-shadow: 0 0 15px 2px hsla(var(--cosmos-solar), 0.3);
}

.star {
  background-color: white;
  border-radius: 50%;
  opacity: 0.7;
  position: absolute;
}

.star-small {
  width: 1px;
  height: 1px;
}

.star-medium {
  width: 2px;
  height: 2px;
}

.star-large {
  width: 3px;
  height: 3px;
  box-shadow: 0 0 4px 1px rgba(255, 255, 255, 0.3);
}

.animate-float {
  animation: float 6s ease-in-out infinite;
}

.animate-pulse-slow {
  animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

.animate-slide-up {
  animation: slideUp 0.3s ease-out;
}

.animate-slide-down {
  animation: slideDown 0.3s ease-out;
}

.animate-fade-in {
  animation: fadeIn 0.5s ease-out;
}

@keyframes float {
  0% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-10px);
  }
  100% {
    transform: translateY(0px);
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

/* Markdown content styling */
.markdown-content {
  @apply text-foreground;
}

.markdown-content h1 {
  @apply text-2xl font-bold mb-4;
}

.markdown-content h2 {
  @apply text-xl font-bold mb-3;
}

.markdown-content h3 {
  @apply text-lg font-bold mb-2;
}

.markdown-content p {
  @apply mb-4;
}

.markdown-content ul {
  @apply list-disc pl-5 mb-4;
}

.markdown-content ol {
  @apply list-decimal pl-5 mb-4;
}

.markdown-content a {
  @apply text-primary hover:underline;
}

.markdown-content blockquote {
  @apply pl-4 border-l-4 border-primary/50 italic my-4;
}

.markdown-content pre {
  @apply bg-muted p-4 rounded-md overflow-x-auto my-4;
}

.markdown-content code {
  @apply bg-muted px-1 py-0.5 rounded;
}

/* Custom button variant for cosmic theme */
.btn-cosmic {
  @apply bg-gradient-to-r from-primary to-primary/70 text-white hover:from-primary/90 hover:to-primary transition-all shadow-lg;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: hsl(var(--background));
}

::-webkit-scrollbar-thumb {
  background: hsl(var(--primary) / 0.3);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: hsl(var(--primary) / 0.5);
}

/* Add this new component for cosmic button variant */
@layer components {
  .btn-variant-cosmic {
    @apply bg-gradient-to-r from-primary to-primary/80 text-white hover:from-primary hover:to-primary/70 transition-all shadow-md hover:shadow-lg hover:shadow-primary/20;
  }
}

/* Calendar customizations */
.calendar-wrapper .rdp {
  --rdp-cell-size: 55px;
  --rdp-accent-color: #9b87f5;
  --rdp-background-color: #2d2d2d30;
  margin: 0;
}

.calendar-wrapper .rdp-day {
  font-size: 16px;
}

.calendar-wrapper .rdp-button:hover:not([disabled]):not(.rdp-day_selected) {
  background-color: var(--rdp-background-color);
}

.calendar-wrapper .rdp-months {
  justify-content: center;
}

.calendar-wrapper .rdp-caption {
  font-size: 1.25rem;
  padding: 0.5rem 0;
}

.calendar-wrapper .rdp-head_cell {
  font-size: 1rem;
  font-weight: 500;
}

.calendar-wrapper .rdp-nav {
  padding: 0 1rem;
}

.calendar-wrapper .rdp-nav_button {
  width: 32px;
  height: 32px;
}

.calendar-wrapper .rdp-nav_button svg {
  width: 18px;
  height: 18px;
}
</file>
<file name="vite-env.d.ts" path="src\vite-env.d.ts">
/// <reference types="vite/client" />
</file>
<file name="NotesContextTypes.tsx" path="src\context\NotesContextTypes.tsx">
import React, { createContext } from 'react';
import { Note, NoteTag, MoodBoard } from '../types';

export interface NotesContextType {
  notes: Note[];
  tags: NoteTag[];
  moodBoards: MoodBoard[];
  activeNote: Note | null;
  addNote: (note: Partial<Note>) => Note;
  updateNote: (id: string, note: Partial<Note>) => void;
  deleteNote: (id: string) => void;
  addTag: (tag: Partial<NoteTag>) => void;
  updateTag: (id: string, tag: Partial<NoteTag>) => void;
  deleteTag: (id: string) => void;
  setActiveNote: (note: Note | null) => void;
  addMoodBoard: (moodBoard: Partial<MoodBoard>) => MoodBoard;
  updateMoodBoard: (id: string, moodBoard: Partial<MoodBoard>) => void;
  deleteMoodBoard: (id: string) => void;
}

export const NotesContext = createContext<NotesContextType | undefined>(undefined);

export const useNotes = (): NotesContextType => {
  const context = React.useContext(NotesContext);
  if (context === undefined) {
    throw new Error('useNotes must be used within a NotesProvider');
  }
  return context;
}; 
</file>
<file name="NotesContext.tsx" path="src\context\NotesContext.tsx">
import React, { useState, useEffect } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { Note, NoteTag, MoodBoard } from '../types';
import { NotesContext } from './NotesContextTypes';

const defaultTags: NoteTag[] = [
  { id: '1', name: 'Personal', color: '#9b87f5' },
  { id: '2', name: 'Work', color: '#0EA5E9' },
  { id: '3', name: 'Ideas', color: '#10B981' },
  { id: '4', name: 'Important', color: '#F97316' },
];

const defaultNotes: Note[] = [
  {
    id: '1',
    title: 'Welcome to Notara',
    content: `# Welcome to Notara!

Notara is a beautiful note-taking app with a cosmic theme and powerful features.

## Features
- Write in Markdown
- Organize with tags
- Visualize connections with Constellation View
- Create mood boards
- Use AI assistance

Get started by creating your first note!`,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    tags: [defaultTags[0], defaultTags[2]],
    isPinned: true
  },
  {
    id: '2',
    title: 'Markdown Cheat Sheet',
    content: `# Markdown Cheat Sheet

## Headers
# H1
## H2
### H3

## Emphasis
*italic*
**bold**
~~strikethrough~~

## Lists
- Item 1
- Item 2
  - Subitem

1. Item 1
2. Item 2

## Links & Images
[Link](https://example.com)
![Image Alt](https://example.com/image.jpg)

## Code
\`inline code\`

\`\`\`
// code block
function hello() {
  console.log("Hello Notara!");
}
\`\`\`

## Blockquotes
> This is a blockquote

## Tables
| Header 1 | Header 2 |
|----------|----------|
| Cell 1   | Cell 2   |
`,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    tags: [defaultTags[2]],
    isPinned: false
  }
];

const defaultMoodBoards: MoodBoard[] = [
  {
    id: '1',
    name: 'Project Inspiration',
    items: [
      {
        id: '1',
        type: 'image',
        content: 'https://images.unsplash.com/photo-1581091226825-a6a2a5aee158',
        position: { x: 50, y: 50 },
        size: { width: 200, height: 150 }
      },
      {
        id: '2',
        type: 'text',
        content: 'Key project goals for Q3',
        position: { x: 300, y: 100 }
      }
    ]
  }
];

export const NotesProvider: React.FC<{children: React.ReactNode}> = ({ children }) => {
  const [notes, setNotes] = useState<Note[]>(
    JSON.parse(localStorage.getItem('notara-notes') || JSON.stringify(defaultNotes))
  );
  const [tags, setTags] = useState<NoteTag[]>(
    JSON.parse(localStorage.getItem('notara-tags') || JSON.stringify(defaultTags))
  );
  const [moodBoards, setMoodBoards] = useState<MoodBoard[]>(
    JSON.parse(localStorage.getItem('notara-moodboards') || JSON.stringify(defaultMoodBoards))
  );
  const [activeNote, setActiveNote] = useState<Note | null>(null);

  // Sync to localStorage when data changes
  useEffect(() => {
    localStorage.setItem('notara-notes', JSON.stringify(notes));
  }, [notes]);

  useEffect(() => {
    localStorage.setItem('notara-tags', JSON.stringify(tags));
  }, [tags]);

  useEffect(() => {
    localStorage.setItem('notara-moodboards', JSON.stringify(moodBoards));
  }, [moodBoards]);

  const addNote = (note: Partial<Note>) => {
    const newNote: Note = {
      id: uuidv4(),
      title: note.title || 'Untitled',
      content: note.content || '',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      tags: note.tags || [],
      isPinned: note.isPinned || false
    };
    setNotes([...notes, newNote]);
    return newNote;
  };

  const updateNote = (id: string, note: Partial<Note>) => {
    setNotes(notes.map(n => {
      if (n.id === id) {
        return {
          ...n,
          ...note,
          updatedAt: new Date().toISOString()
        };
      }
      return n;
    }));
  };

  const deleteNote = (id: string) => {
    setNotes(notes.filter(n => n.id !== id));
    if (activeNote?.id === id) {
      setActiveNote(null);
    }
  };

  const addTag = (tag: Partial<NoteTag>) => {
    const newTag: NoteTag = {
      id: uuidv4(),
      name: tag.name || 'New Tag',
      color: tag.color || '#9b87f5'
    };
    setTags([...tags, newTag]);
  };

  const updateTag = (id: string, tag: Partial<NoteTag>) => {
    setTags(tags.map(t => {
      if (t.id === id) {
        return { ...t, ...tag };
      }
      return t;
    }));
  };

  const deleteTag = (id: string) => {
    setTags(tags.filter(t => t.id !== id));
    // Remove the tag from all notes
    setNotes(notes.map(note => ({
      ...note,
      tags: note.tags.filter(t => t.id !== id)
    })));
  };

  const addMoodBoard = (moodBoard: Partial<MoodBoard>) => {
    const newMoodBoard: MoodBoard = {
      id: uuidv4(),
      name: moodBoard.name || 'New Mood Board',
      items: moodBoard.items || []
    };
    setMoodBoards([...moodBoards, newMoodBoard]);
    return newMoodBoard;
  };

  const updateMoodBoard = (id: string, moodBoard: Partial<MoodBoard>) => {
    setMoodBoards(moodBoards.map(mb => {
      if (mb.id === id) {
        return { ...mb, ...moodBoard };
      }
      return mb;
    }));
  };

  const deleteMoodBoard = (id: string) => {
    setMoodBoards(moodBoards.filter(mb => mb.id !== id));
  };

  return (
    <NotesContext.Provider value={{
      notes,
      tags,
      moodBoards,
      activeNote,
      addNote,
      updateNote,
      deleteNote,
      addTag,
      updateTag,
      deleteTag,
      setActiveNote,
      addMoodBoard,
      updateMoodBoard,
      deleteMoodBoard,
    }}>
      {children}
    </NotesContext.Provider>
  );
};
</file>
<file name="AuthContext.tsx" path="src\context\AuthContext.tsx">
import React, { createContext, useState, useEffect, useContext, ReactNode } from 'react';
import { User } from '@supabase/supabase-js';
import { 
  supabase, 
  signInWithGithub, 
  signInWithEmail,
  signUpWithEmail,
  resetPassword,
  signOut, 
  getCurrentUser 
} from '../lib/supabase';
import { toast } from '@/hooks/use-toast';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  signInWithGithub: () => Promise<void>;
  signInWithEmail: (email: string, password: string) => Promise<void>;
  signUpWithEmail: (email: string, password: string) => Promise<void>;
  resetPassword: (email: string) => Promise<void>;
  signOut: () => Promise<void>;
  isAuthenticated: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    // Check active session
    const checkUser = async () => {
      try {
        // First try to get the session directly
        const { data: { session } } = await supabase.auth.getSession();
        
        if (session?.user) {
          console.log('Found active session', session.user.email);
          setUser(session.user);
        } else {
          // Fallback to getCurrentUser
          try {
            const currentUser = await getCurrentUser();
            if (currentUser) {
              console.log('Retrieved user from getCurrentUser', currentUser.email);
              setUser(currentUser);
            } else {
              console.log('No authenticated user found');
            }
          } catch (error) {
            console.error("Error in getCurrentUser:", error);
          }
        }
      } catch (error) {
        console.error("Error checking authentication:", error);
      } finally {
        setLoading(false);
      }
    };

    checkUser();

    // Listen for auth changes
    const { data: authListener } = supabase.auth.onAuthStateChange(
      (event, session) => {
        console.log('Auth state change:', event, session?.user?.email);
        setUser(session?.user ?? null);
        setLoading(false);
        
        if (event === 'SIGNED_IN') {
          toast({
            title: "Signed in successfully",
            description: `Welcome back${session?.user?.email ? `, ${session.user.email}` : ''}!`,
          });
        }
        
        if (event === 'SIGNED_OUT') {
          toast({
            title: "Signed out",
            description: "You have been signed out successfully.",
          });
        }

        if (event === 'USER_UPDATED') {
          toast({
            title: "Profile updated",
            description: "Your profile has been updated successfully.",
          });
        }

        if (event === 'PASSWORD_RECOVERY') {
          toast({
            title: "Password reset",
            description: "Your password has been reset successfully.",
          });
        }
      }
    );

    return () => {
      authListener.subscription.unsubscribe();
    };
  }, []);

  const handleSignInWithGithub = async () => {
    try {
      setLoading(true);
      await signInWithGithub();
    } catch (error) {
      console.error("Error signing in with GitHub:", error);
      toast({
        title: "Sign in failed",
        description: "There was a problem signing in with GitHub.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSignInWithEmail = async (email: string, password: string) => {
    try {
      setLoading(true);
      const { error } = await signInWithEmail(email, password);
      if (error) throw error;
    } catch (error) {
      console.error("Error signing in with email:", error);
      toast({
        title: "Sign in failed",
        description: "Invalid email or password.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSignUpWithEmail = async (email: string, password: string) => {
    try {
      setLoading(true);
      const { error } = await signUpWithEmail(email, password);
      if (error) throw error;
      
      // The user will be automatically signed in now thanks to our changes in supabase.ts
      toast({
        title: "Account created",
        description: "Your account has been created and you are now signed in.",
      });
    } catch (error) {
      console.error("Error signing up with email:", error);
      toast({
        title: "Sign up failed",
        description: "There was a problem creating your account.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleResetPassword = async (email: string) => {
    try {
      setLoading(true);
      const { error } = await resetPassword(email);
      if (error) throw error;
      toast({
        title: "Password reset email sent",
        description: "Check your email for the password reset link.",
      });
    } catch (error) {
      console.error("Error resetting password:", error);
      toast({
        title: "Reset failed",
        description: "There was a problem sending the reset email.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSignOut = async () => {
    try {
      setLoading(true);
      await signOut();
      setUser(null);
    } catch (error) {
      console.error("Error signing out:", error);
      toast({
        title: "Sign out failed",
        description: "There was a problem signing out.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const value: AuthContextType = {
    user,
    loading,
    signInWithGithub: handleSignInWithGithub,
    signInWithEmail: handleSignInWithEmail,
    signUpWithEmail: handleSignUpWithEmail,
    resetPassword: handleResetPassword,
    signOut: handleSignOut,
    isAuthenticated: !!user,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
</file>
<file name="utils.ts" path="src\lib\utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>
<file name="supabase.ts" path="src\lib\supabase.ts">
import { createClient } from '@supabase/supabase-js';

// Get environment variables for Supabase
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Add debug logging to check for missing environment variables
if (!supabaseUrl || !supabaseAnonKey) {
  console.error('Missing Supabase environment variables:', { 
    urlExists: !!supabaseUrl, 
    keyExists: !!supabaseAnonKey 
  });
}

// Create the Supabase client
export const supabase = createClient(supabaseUrl || '', supabaseAnonKey || '');

// Authentication functions
export const signInWithGithub = async () => {
  try {
    return await supabase.auth.signInWithOAuth({
      provider: 'github',
      options: {
        redirectTo: `${window.location.origin}/auth/callback`,
        scopes: 'user:email'
      }
    });
  } catch (error) {
    console.error('GitHub OAuth error:', error);
    throw error;
  }
};

export const signInWithEmail = async (email: string, password: string) => {
  try {
    return await supabase.auth.signInWithPassword({
      email,
      password
    });
  } catch (error) {
    console.error('Email sign in error:', error);
    throw error;
  }
};

export const signUpWithEmail = async (email: string, password: string) => {
  try {
    // For development: Auto-confirm email signups by setting emailRedirectTo to null
    // and adding data.user in the success case
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        // In development, disable email confirmation
        emailRedirectTo: null,
        // Set this to true for auto-confirmation (bypasses email verification)
        // Remove or set to false in production
        data: {
          email_confirmed: true
        }
      }
    });

    // If successful registration and auto-confirm enabled, sign in the user immediately
    if (data.user && !error) {
      console.log('Auto-confirming user and signing in');
      await signInWithEmail(email, password);
    }

    return { data, error };
  } catch (error) {
    console.error('Email sign up error:', error);
    throw error;
  }
};

export const resetPassword = async (email: string) => {
  return await supabase.auth.resetPasswordForEmail(email, {
    redirectTo: `${window.location.origin}/auth/reset-password`
  });
};

export const signOut = async () => {
  return await supabase.auth.signOut();
};

export const getCurrentUser = async () => {
  try {
    const { data, error } = await supabase.auth.getUser();
    if (error) {
      console.error('Error getting current user:', error);
      return null;
    }
    return data?.user;
  } catch (error) {
    console.error('Unexpected error in getCurrentUser:', error);
    return null;
  }
};

// Export function to check Supabase credentials
export const checkSupabaseCredentials = () => {
  return {
    supabaseUrl,
    hasAnonKey: !!supabaseAnonKey,
    anonKeyLength: supabaseAnonKey?.length || 0
  };
};

// Add these functions when you have actual Supabase credentials
export const initSupabase = (url: string, key: string) => {
  return createClient(url, key);
};
</file>
<file name="App.tsx" path="src\App.tsx">
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { NotesProvider } from "./context/NotesContext";
import { AuthProvider } from "./context/AuthContext";
import HomePage from "./pages/HomePage";
import TagsPage from "./pages/TagsPage";
import ConstellationsPage from "./pages/ConstellationsPage";
import MoodBoardPage from "./pages/MoodBoardPage";
import AiAssistantPage from "./pages/AiAssistantPage";
import CalendarPage from "./pages/CalendarPage";
import SettingsPage from "./pages/SettingsPage";
import ProfileSettingsPage from "./pages/ProfileSettingsPage";
import NotFound from "./pages/NotFound";
import MarkdownCheatsheetPage from "./pages/MarkdownCheatsheetPage";
import NoteViewPage from "./pages/NoteViewPage";
import AuthPage from "./pages/AuthPage";
import AuthCallbackPage from "./pages/AuthCallbackPage";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <TooltipProvider>
      <AuthProvider>
        <NotesProvider>
          <Toaster />
          <Sonner />
          <BrowserRouter>
            <Routes>
              <Route path="/" element={<HomePage />} />
              <Route path="/tags" element={<TagsPage />} />
              <Route path="/constellations" element={<ConstellationsPage />} />
              <Route path="/mood-board" element={<MoodBoardPage />} />
              <Route path="/ai-assistant" element={<AiAssistantPage />} />
              <Route path="/calendar" element={<CalendarPage />} />
              <Route path="/settings" element={<SettingsPage />} />
              <Route path="/settings/profile" element={<ProfileSettingsPage />} />
              <Route path="/markdown-cheatsheet" element={<MarkdownCheatsheetPage />} />
              <Route path="/note/:id" element={<NoteViewPage />} />
              <Route path="/auth" element={<AuthPage />} />
              <Route path="/auth/callback" element={<AuthCallbackPage />} />
              <Route path="*" element={<NotFound />} />
            </Routes>
          </BrowserRouter>
        </NotesProvider>
      </AuthProvider>
    </TooltipProvider>
  </QueryClientProvider>
);

export default App;
</file>
<file name="use-toast.ts" path="src\hooks\use-toast.ts">
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>
<file name="use-mobile.tsx" path="src\hooks\use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>
<file name="index.ts" path="src\types\index.ts">
export interface NoteTag {
  id: string;
  name: string;
  color: string;
}

export interface Note {
  id: string;
  title: string;
  content: string;
  createdAt: string;
  updatedAt: string;
  tags: NoteTag[];
  isPinned: boolean;
}

export interface MoodBoardItem {
  id: string;
  type: 'image' | 'text';
  content: string;
  position: { x: number; y: number };
  size?: { width: number; height: number };
}

export interface MoodBoard {
  id: string;
  name: string;
  items: MoodBoardItem[];
}
</file>
<file name="SettingsPage.tsx" path="src\pages\SettingsPage.tsx">
import React from 'react';
import Settings from '@/components/settings/SettingsPage';

const SettingsPage: React.FC = () => <Settings />;

export default SettingsPage;
</file>
<file name="TagsPage.tsx" path="src\pages\TagsPage.tsx">
import React, { useState } from 'react';
import AppLayout from '@/components/layout/AppLayout';
import { useNotes } from '@/context/NotesContextTypes';
import { Button } from '@/components/ui/button';
import { 
  Dialog, 
  DialogContent, 
  DialogFooter, 
  DialogHeader, 
  DialogTitle 
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { NoteTag, Note } from '@/types';
import { Label } from '@/components/ui/label';
import { useNavigate } from 'react-router-dom';

const TagsPage: React.FC = () => {
  const { tags, notes, addTag, updateTag, deleteTag, setActiveNote } = useNotes();
  const [isCreatingTag, setIsCreatingTag] = useState(false);
  const [isEditingTag, setIsEditingTag] = useState(false);
  const [newTagName, setNewTagName] = useState('');
  const [newTagColor, setNewTagColor] = useState('#9b87f5');
  const [editingTag, setEditingTag] = useState<NoteTag | null>(null);
  
  const navigate = useNavigate();
  
  const handleCreateTag = () => {
    if (!newTagName.trim()) return;
    
    addTag({
      name: newTagName,
      color: newTagColor
    });
    
    setNewTagName('');
    setNewTagColor('#9b87f5');
    setIsCreatingTag(false);
  };
  
  const handleEditTag = () => {
    if (!editingTag || !newTagName.trim()) return;
    
    updateTag(editingTag.id, {
      name: newTagName,
      color: newTagColor
    });
    
    setNewTagName('');
    setNewTagColor('#9b87f5');
    setIsEditingTag(false);
    setEditingTag(null);
  };
  
  const openEditDialog = (tag: NoteTag) => {
    setEditingTag(tag);
    setNewTagName(tag.name);
    setNewTagColor(tag.color);
    setIsEditingTag(true);
  };
  
  const handleDeleteTag = (id: string) => {
    if (confirm('Are you sure you want to delete this tag? It will be removed from all notes.')) {
      deleteTag(id);
    }
  };
  
  const getNotesWithTag = (tagId: string): Note[] => {
    return notes.filter(note => note.tags.some(tag => tag.id === tagId));
  };
  
  const handleNoteClick = (note: Note) => {
    setActiveNote(note);
    navigate('/');
  };
  
  return (
    <AppLayout>
      <div className="h-full flex flex-col">
        <div className="p-4 border-b border-border flex justify-between items-center">
          <h2 className="text-xl font-bold">Tags</h2>
          <Button onClick={() => setIsCreatingTag(true)}>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2"><line x1="12" y1="5" x2="12" y2="19"/><line x1="5" y1="12" x2="19" y2="12"/></svg>
            New Tag
          </Button>
        </div>
        
        <div className="flex-1 overflow-auto p-6">
          {tags.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-40">
              <p className="text-muted-foreground mb-4">No tags created yet</p>
              <Button onClick={() => setIsCreatingTag(true)}>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2"><line x1="12" y1="5" x2="12" y2="19"/><line x1="5" y1="12" x2="19" y2="12"/></svg>
                Create First Tag
              </Button>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {tags.map(tag => {
                const notesWithTag = getNotesWithTag(tag.id);
                
                return (
                  <div 
                    key={tag.id} 
                    className="bg-card border border-border rounded-lg overflow-hidden"
                  >
                    <div 
                      className="p-4 flex justify-between items-center"
                      style={{ backgroundColor: `${tag.color}20` }}
                    >
                      <div className="flex items-center gap-3">
                        <div 
                          className="w-4 h-4 rounded-full"
                          style={{ backgroundColor: tag.color }}
                        />
                        <h3 className="font-medium">{tag.name}</h3>
                      </div>
                      <div className="flex gap-1">
                        <button
                          className="p-2 rounded-md hover:bg-secondary/50 transition-colors"
                          onClick={() => openEditDialog(tag)}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/></svg>
                        </button>
                        <button
                          className="p-2 rounded-md hover:bg-secondary/50 transition-colors"
                          onClick={() => handleDeleteTag(tag.id)}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M3 6h18"/><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/><path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/></svg>
                        </button>
                      </div>
                    </div>
                    <div className="p-4">
                      <h4 className="text-sm text-muted-foreground mb-3">
                        {notesWithTag.length} note{notesWithTag.length !== 1 ? 's' : ''}
                      </h4>
                      <div className="space-y-2">
                        {notesWithTag.length === 0 ? (
                          <p className="text-sm text-muted-foreground">No notes with this tag</p>
                        ) : (
                          notesWithTag.slice(0, 3).map(note => (
                            <div 
                              key={note.id} 
                              className="flex justify-between items-center p-2 rounded-md bg-secondary/30 hover:bg-secondary/50 transition-colors cursor-pointer"
                              onClick={() => handleNoteClick(note)}
                            >
                              <span className="truncate">{note.title}</span>
                            </div>
                          ))
                        )}
                        {notesWithTag.length > 3 && (
                          <p className="text-xs text-muted-foreground text-right pt-1">
                            +{notesWithTag.length - 3} more
                          </p>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
        
        {/* Create Tag Dialog */}
        <Dialog open={isCreatingTag} onOpenChange={setIsCreatingTag}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Create New Tag</DialogTitle>
            </DialogHeader>
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="name">Tag Name</Label>
                <Input
                  id="name"
                  value={newTagName}
                  onChange={(e) => setNewTagName(e.target.value)}
                  placeholder="Enter tag name"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="color">Tag Color</Label>
                <div className="flex items-center gap-2">
                  <input
                    type="color"
                    id="color"
                    value={newTagColor}
                    onChange={(e) => setNewTagColor(e.target.value)}
                    className="w-10 h-10 rounded-md cursor-pointer"
                  />
                  <Input
                    value={newTagColor}
                    onChange={(e) => setNewTagColor(e.target.value)}
                    maxLength={7}
                  />
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsCreatingTag(false)}>
                Cancel
              </Button>
              <Button onClick={handleCreateTag}>
                Create Tag
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
        
        {/* Edit Tag Dialog */}
        <Dialog open={isEditingTag} onOpenChange={setIsEditingTag}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Edit Tag</DialogTitle>
            </DialogHeader>
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="edit-name">Tag Name</Label>
                <Input
                  id="edit-name"
                  value={newTagName}
                  onChange={(e) => setNewTagName(e.target.value)}
                  placeholder="Enter tag name"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="edit-color">Tag Color</Label>
                <div className="flex items-center gap-2">
                  <input
                    type="color"
                    id="edit-color"
                    value={newTagColor}
                    onChange={(e) => setNewTagColor(e.target.value)}
                    className="w-10 h-10 rounded-md cursor-pointer"
                  />
                  <Input
                    value={newTagColor}
                    onChange={(e) => setNewTagColor(e.target.value)}
                    maxLength={7}
                  />
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsEditingTag(false)}>
                Cancel
              </Button>
              <Button onClick={handleEditTag}>
                Save Changes
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </AppLayout>
  );
};

export default TagsPage;
</file>
<file name="ProfileSettingsPage.tsx" path="src\pages\ProfileSettingsPage.tsx">
import React from 'react';
import ProfileSettings from '@/components/settings/ProfileSettings';
import AppLayout from '@/components/layout/AppLayout';

const ProfileSettingsPage: React.FC = () => (
  <AppLayout>
    <div className="container mx-auto px-4 py-6 max-w-5xl">
      <h1 className="text-2xl font-bold mb-6">Profile Settings</h1>
      <ProfileSettings />
    </div>
  </AppLayout>
);

export default ProfileSettingsPage; 
</file>
<file name="NotFound.tsx" path="src\pages\NotFound.tsx">
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;
</file>
<file name="NoteViewPage.tsx" path="src\pages\NoteViewPage.tsx">
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useNotes } from '@/context/NotesContextTypes';
import AppLayout from '@/components/layout/AppLayout';
import NoteEditor from '@/components/notes/NoteEditor';
import { Note } from '@/types';
import { ResizablePanel } from '@/components/ui/resizable';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { ArrowLeft } from 'lucide-react';

const NoteViewPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const { notes } = useNotes();
  const [note, setNote] = useState<Note | undefined>(undefined);
  const navigate = useNavigate();

  useEffect(() => {
    if (id) {
      const foundNote = notes.find(n => n.id === id);
      if (foundNote) {
        setNote(foundNote);
      } else {
        toast({
          title: "Note not found",
          description: "The note you're looking for doesn't exist",
          variant: "destructive"
        });
        navigate('/');
      }
    }
  }, [id, notes, navigate]);

  return (
    <AppLayout>
      <ResizablePanel defaultSize={100} minSize={30}>
        <div className="h-full">
          <div className="flex items-center p-2 border-b border-border">
            <Button 
              onClick={() => navigate(-1)} 
              variant="ghost"
              size="sm"
              className="mr-2"
            >
              <ArrowLeft className="h-4 w-4 mr-1" />
              Back
            </Button>
          </div>
          {note ? (
            <NoteEditor note={note} />
          ) : (
            <div className="p-10 text-center">
              <p className="text-muted-foreground">Loading note...</p>
            </div>
          )}
        </div>
      </ResizablePanel>
    </AppLayout>
  );
};

export default NoteViewPage;
</file>
<file name="MoodBoardPage.tsx" path="src\pages\MoodBoardPage.tsx">
import React, { useState } from 'react';
import AppLayout from '@/components/layout/AppLayout';
import MoodBoard from '@/components/moodboard/MoodBoard';
import { useNotes } from '@/context/NotesContextTypes';
import { Button } from '@/components/ui/button';
import { 
  Dialog, 
  DialogContent, 
  DialogFooter, 
  DialogHeader, 
  DialogTitle 
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { ResizablePanel } from '@/components/ui/resizable';

const MoodBoardPage: React.FC = () => {
  const { moodBoards, addMoodBoard } = useNotes();
  const [selectedMoodBoardId, setSelectedMoodBoardId] = useState<string | null>(
    moodBoards.length > 0 ? moodBoards[0].id : null
  );
  const [isCreatingBoard, setIsCreatingBoard] = useState(false);
  const [newBoardName, setNewBoardName] = useState('');

  const handleCreateMoodBoard = () => {
    if (!newBoardName.trim()) return;
    
    const newBoard = addMoodBoard({ name: newBoardName });
    setNewBoardName('');
    setIsCreatingBoard(false);
    setSelectedMoodBoardId(newBoard.id);
  };
  
  return (
    <AppLayout>
      <ResizablePanel defaultSize={100}>
        <div className="flex flex-col h-full w-full">
          <div className="flex-none p-4 border-b border-border flex justify-between items-center">
            <h2 className="text-xl font-bold">Mood Boards</h2>
            <Button onClick={() => setIsCreatingBoard(true)}>
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2"><line x1="12" y1="5" x2="12" y2="19"/><line x1="5" y1="12" x2="19" y2="12"/></svg>
              New Mood Board
            </Button>
          </div>
          
          {moodBoards.length > 0 && (
            <div className="flex-none border-b border-border">
              <div className="flex overflow-x-auto py-2 px-4">
                {moodBoards.map(board => (
                  <button
                    key={board.id}
                    className={`px-4 py-2 rounded-md whitespace-nowrap mr-2 ${
                      selectedMoodBoardId === board.id
                        ? 'bg-primary text-primary-foreground'
                        : 'bg-secondary/30 hover:bg-secondary/50'
                    }`}
                    onClick={() => setSelectedMoodBoardId(board.id)}
                  >
                    {board.name}
                  </button>
                ))}
              </div>
            </div>
          )}
          
          <div className="flex-grow overflow-hidden relative">
            {selectedMoodBoardId ? (
              <div className="absolute inset-0 max-w-full overflow-auto">
                <MoodBoard id={selectedMoodBoardId} />
              </div>
            ) : (
              <div className="h-full flex flex-col items-center justify-center p-8 text-center">
                <div className="w-24 h-24 mb-6 rounded-full bg-gradient-to-br from-cosmos-stardust to-cosmos-aurora nebula-glow flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-white"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"/><circle cx="8.5" cy="8.5" r="1.5"/><polyline points="21 15 16 10 5 21"/></svg>
                </div>
                <h2 className="text-2xl font-bold mb-2">Create Your First Mood Board</h2>
                <p className="text-muted-foreground mb-6 max-w-md">
                  Collect and organize images, quotes, and ideas in a visual board.
                  Perfect for inspiration and creative projects.
                </p>
                <Button onClick={() => setIsCreatingBoard(true)}>
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2"><line x1="12" y1="5" x2="12" y2="19"/><line x1="5" y1="12" x2="19" y2="12"/></svg>
                  Create Mood Board
                </Button>
              </div>
            )}
          </div>
          
          <Dialog open={isCreatingBoard} onOpenChange={setIsCreatingBoard}>
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle>Create New Mood Board</DialogTitle>
              </DialogHeader>
              <Input
                value={newBoardName}
                onChange={(e) => setNewBoardName(e.target.value)}
                placeholder="Mood Board Name"
                className="mt-4"
              />
              <DialogFooter className="flex justify-end gap-2 mt-4">
                <Button variant="outline" onClick={() => setIsCreatingBoard(false)}>
                  Cancel
                </Button>
                <Button onClick={handleCreateMoodBoard}>
                  Create
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      </ResizablePanel>
    </AppLayout>
  );
};

export default MoodBoardPage;
</file>
<file name="MarkdownCheatsheetPage.tsx" path="src\pages\MarkdownCheatsheetPage.tsx">
import React from 'react';
import AppLayout from '@/components/layout/AppLayout';
import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

const MarkdownCheatsheetPage: React.FC = () => {
  return (
    <AppLayout>
      <div className="h-full overflow-y-auto p-6">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-3xl font-bold mb-6 text-center bg-gradient-to-r from-cosmos-nebula to-cosmos-aurora bg-clip-text text-transparent">
            Markdown Cheat Sheet
          </h1>
          <p className="text-muted-foreground text-center mb-8">
            A quick reference to the Markdown syntax for your notes
          </p>

          <Tabs defaultValue="basic" className="w-full">
            <TabsList className="grid grid-cols-3 mb-6">
              <TabsTrigger value="basic">Basic Syntax</TabsTrigger>
              <TabsTrigger value="extended">Extended Syntax</TabsTrigger>
              <TabsTrigger value="advanced">Advanced</TabsTrigger>
            </TabsList>
            
            <TabsContent value="basic" className="space-y-6">
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Headings</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre># Heading 1</pre>
                      <pre>## Heading 2</pre>
                      <pre>### Heading 3</pre>
                      <pre>#### Heading 4</pre>
                      <pre>##### Heading 5</pre>
                      <pre>###### Heading 6</pre>
                    </div>
                    <div className="p-4">
                      <h1 className="text-2xl font-bold">Heading 1</h1>
                      <h2 className="text-xl font-bold">Heading 2</h2>
                      <h3 className="text-lg font-bold">Heading 3</h3>
                      <h4 className="text-base font-bold">Heading 4</h4>
                      <h5 className="text-sm font-bold">Heading 5</h5>
                      <h6 className="text-xs font-bold">Heading 6</h6>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Emphasis</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>*italic*</pre>
                      <pre>**bold**</pre>
                      <pre>~~strikethrough~~</pre>
                      <pre>*You **can** combine them*</pre>
                    </div>
                    <div className="p-4">
                      <p><em>italic</em></p>
                      <p><strong>bold</strong></p>
                      <p><del>strikethrough</del></p>
                      <p><em>You <strong>can</strong> combine them</em></p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Lists</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>- Unordered item</pre>
                      <pre>- Another item</pre>
                      <pre>  - Nested item</pre>
                      <pre>  - Another nested item</pre>
                      <pre>- Last item</pre>
                      <pre>{''}</pre>
                      <pre>1. Ordered item</pre>
                      <pre>2. Another item</pre>
                      <pre>3. Last item</pre>
                    </div>
                    <div className="p-4">
                      <ul className="list-disc pl-5 mb-4">
                        <li>Unordered item</li>
                        <li>Another item
                          <ul className="list-disc pl-5 mt-1">
                            <li>Nested item</li>
                            <li>Another nested item</li>
                          </ul>
                        </li>
                        <li>Last item</li>
                      </ul>
                      
                      <ol className="list-decimal pl-5">
                        <li>Ordered item</li>
                        <li>Another item</li>
                        <li>Last item</li>
                      </ol>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Links & Images</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>[Link text](https://example.com)</pre>
                      <pre>{''}</pre>
                      <pre>![Alt text](https://example.com/image.jpg)</pre>
                    </div>
                    <div className="p-4">
                      <p><a href="#" className="text-blue-500 hover:underline">Link text</a></p>
                      <p className="mt-4">Image would be displayed here</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Code</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>`inline code`</pre>
                      <pre>{''}</pre>
                      <pre>```</pre>
                      <pre>// code block</pre>
                      <pre>function hello() {'{'}</pre>
                      <pre>  console.log("Hello!");</pre>
                      <pre>{'}'}</pre>
                      <pre>```</pre>
                    </div>
                    <div className="p-4">
                      <p><code className="bg-secondary px-1 py-0.5 rounded">inline code</code></p>
                      
                      <div className="bg-secondary px-4 py-3 rounded-md mt-4">
                        <pre className="text-sm">
                          <code>
                            // code block<br />
                            function hello() {'{'}<br />
                            &nbsp;&nbsp;console.log("Hello!");<br />
                            {'}'}<br />
                          </code>
                        </pre>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Blockquotes</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>{'> This is a blockquote'}</pre>
                      <pre>{'> '}</pre>
                      <pre>{'> It can span multiple lines'}</pre>
                    </div>
                    <div className="p-4">
                      <blockquote className="border-l-4 border-primary pl-4 italic text-muted-foreground">
                        <p>This is a blockquote</p>
                        <p>It can span multiple lines</p>
                      </blockquote>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Paragraphs</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>First paragraph.</pre>
                      <pre>{''}</pre>
                      <pre>Second paragraph.</pre>
                      <pre>{''}</pre>
                      <pre>Line break<br />with two spaces at end.</pre>
                    </div>
                    <div className="p-4">
                      <p className="mb-4">First paragraph.</p>
                      <p className="mb-4">Second paragraph.</p>
                      <p>Line break<br />with two spaces at end.</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="extended" className="space-y-6">
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Tables</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>| Header 1 | Header 2 |</pre>
                      <pre>|----------|----------|</pre>
                      <pre>| Cell 1   | Cell 2   |</pre>
                      <pre>| Cell 3   | Cell 4   |</pre>
                    </div>
                    <div className="p-4">
                      <table className="min-w-full border border-border">
                        <thead>
                          <tr>
                            <th className="border border-border p-2">Header 1</th>
                            <th className="border border-border p-2">Header 2</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr>
                            <td className="border border-border p-2">Cell 1</td>
                            <td className="border border-border p-2">Cell 2</td>
                          </tr>
                          <tr>
                            <td className="border border-border p-2">Cell 3</td>
                            <td className="border border-border p-2">Cell 4</td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Task Lists</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>- [x] Completed task</pre>
                      <pre>- [ ] Incomplete task</pre>
                      <pre>- [x] Another completed task</pre>
                    </div>
                    <div className="p-4">
                      <div className="space-y-1">
                        <div className="flex items-center">
                          <input type="checkbox" checked readOnly className="mr-2" />
                          <span>Completed task</span>
                        </div>
                        <div className="flex items-center">
                          <input type="checkbox" readOnly className="mr-2" />
                          <span>Incomplete task</span>
                        </div>
                        <div className="flex items-center">
                          <input type="checkbox" checked readOnly className="mr-2" />
                          <span>Another completed task</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Footnotes</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>Here's a sentence with a footnote.[^1]</pre>
                      <pre>{''}</pre>
                      <pre>[^1]: This is the footnote.</pre>
                    </div>
                    <div className="p-4">
                      <p>Here's a sentence with a footnote.<sup>1</sup></p>
                      <div className="mt-4 text-sm border-t border-border pt-2">
                        <p><sup>1</sup> This is the footnote.</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Definition Lists</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>term</pre>
                      <pre>: definition</pre>
                    </div>
                    <div className="p-4">
                      <dl>
                        <dt className="font-semibold">term</dt>
                        <dd className="pl-4">definition</dd>
                      </dl>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Horizontal Rule</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>---</pre>
                      <pre>{''}</pre>
                      <pre>***</pre>
                      <pre>{''}</pre>
                      <pre>___</pre>
                    </div>
                    <div className="p-4">
                      <hr className="my-4 border-t border-border" />
                      <p className="text-sm text-muted-foreground">All three options produce the same horizontal rule</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Code Blocks with Syntax Highlighting</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>```javascript</pre>
                      <pre>function add(a, b) {'{'}</pre>
                      <pre>  return a + b;</pre>
                      <pre>{'}'}</pre>
                      <pre>```</pre>
                    </div>
                    <div className="p-4">
                      <div className="bg-secondary px-4 py-3 rounded-md text-sm">
                        <div className="text-xs text-muted-foreground mb-2">javascript</div>
                        <pre>
                          <code>
                            <span className="text-blue-400">function</span> <span className="text-yellow-400">add</span>(<span className="text-green-400">a</span>, <span className="text-green-400">b</span>) {'{'}<br />
                            &nbsp;&nbsp;<span className="text-blue-400">return</span> a + b;<br />
                            {'}'}
                          </code>
                        </pre>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="advanced" className="space-y-6">
              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Emoji & Symbols</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>:smile: :heart: :rocket:</pre>
                      <pre>{''}</pre>
                      <pre>:warning: :books: :bulb:</pre>
                    </div>
                    <div className="p-4">
                      <p className="text-xl">😄 ❤️ 🚀</p>
                      <p className="text-xl mt-2">⚠️ 📚 💡</p>
                      <p className="text-sm text-muted-foreground mt-2">Not all Markdown processors support emoji shortcodes</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Table Alignment</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>| Left | Center | Right |</pre>
                      <pre>|:-----|:------:|------:|</pre>
                      <pre>| 1    | 2      | 3     |</pre>
                      <pre>| 4    | 5      | 6     |</pre>
                    </div>
                    <div className="p-4">
                      <table className="min-w-full border border-border">
                        <thead>
                          <tr>
                            <th className="border border-border p-2 text-left">Left</th>
                            <th className="border border-border p-2 text-center">Center</th>
                            <th className="border border-border p-2 text-right">Right</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr>
                            <td className="border border-border p-2 text-left">1</td>
                            <td className="border border-border p-2 text-center">2</td>
                            <td className="border border-border p-2 text-right">3</td>
                          </tr>
                          <tr>
                            <td className="border border-border p-2 text-left">4</td>
                            <td className="border border-border p-2 text-center">5</td>
                            <td className="border border-border p-2 text-right">6</td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Subscript & Superscript</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>H~2~O (subscript)</pre>
                      <pre>{''}</pre>
                      <pre>X^2^ (superscript)</pre>
                    </div>
                    <div className="p-4">
                      <p>H<sub>2</sub>O (subscript)</p>
                      <p className="mt-2">X<sup>2</sup> (superscript)</p>
                      <p className="text-sm text-muted-foreground mt-2">Requires extended syntax support</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Math Expressions</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>Inline: $E=mc^2$</pre>
                      <pre>{''}</pre>
                      <pre>Block:</pre>
                      <pre>$</pre>
                      <pre>\frac{'{'}-b \pm \sqrt{'{'}b^2-4ac{'}'}{'{'}2a{'}'}</pre>
                      <pre>$</pre>
                    </div>
                    <div className="p-4">
                      <p>Inline: <span className="font-mono">E=mc²</span></p>
                      <div className="mt-4 py-2 font-mono text-center">
                        <p>(-b ± √(b² - 4ac)) / 2a</p>
                      </div>
                      <p className="text-sm text-muted-foreground mt-2">Requires LaTeX/KaTeX support</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Link References</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>This is [a link][1] reference.</pre>
                      <pre>{''}</pre>
                      <pre>[1]: https://example.com "Title"</pre>
                    </div>
                    <div className="p-4">
                      <p>This is <a href="#" className="text-blue-500 hover:underline">a link</a> reference.</p>
                      <p className="text-sm text-muted-foreground mt-4">References can be placed anywhere in the document</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Abbreviations</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>The HTML specification.</pre>
                      <pre>{''}</pre>
                      <pre>*[HTML]: Hyper Text Markup Language</pre>
                    </div>
                    <div className="p-4">
                      <p>The <abbr title="Hyper Text Markup Language" className="cursor-help border-dotted border-b">HTML</abbr> specification.</p>
                      <p className="text-sm text-muted-foreground mt-2">Requires extended syntax support</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Mermaid Diagrams</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>```mermaid</pre>
                      <pre>graph TD;</pre>
                      <pre>  A{'-'}{'>'}B;</pre>
                      <pre>  A{'-'}{'>'}C;</pre>
                      <pre>  B{'-'}{'>'}D;</pre>
                      <pre>  C{'-'}{'>'}D;</pre>
                      <pre>```</pre>
                    </div>
                    <div className="p-4">
                      <div className="bg-secondary p-3 rounded-md">
                        <p className="text-center text-sm text-muted-foreground">Diagram would render here:</p>
                        <div className="flex items-center justify-center py-4">
                          <pre className="text-xs text-center">
                            A<br />
                            ↙&nbsp;&nbsp;↘<br />
                            B&nbsp;&nbsp;&nbsp;C<br />
                            ↘&nbsp;&nbsp;↙<br />
                            D
                          </pre>
                        </div>
                        <p className="text-xs text-muted-foreground text-center">Requires Mermaid.js support</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">HTML in Markdown</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>{'<details>'}</pre>
                      <pre>{'<summary>Click to expand</summary>'}</pre>
                      <pre>{'Hidden content here'}</pre>
                      <pre>{'</details>'}</pre>
                      <pre>{''}</pre>
                      <pre>{'<mark>Highlighted text</mark>'}</pre>
                    </div>
                    <div className="p-4">
                      <details className="mb-4">
                        <summary className="cursor-pointer">Click to expand</summary>
                        <p className="mt-2 pl-4">Hidden content here</p>
                      </details>
                      <p><mark className="bg-yellow-200 px-1">Highlighted text</mark></p>
                      <p className="text-sm text-muted-foreground mt-2">HTML support varies by renderer</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <h2 className="text-2xl font-semibold mb-4">Comment Syntax</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-muted p-4 rounded-md font-mono">
                      <pre>{`<!-- This is a comment -->`}</pre>
                      <pre>{''}</pre>
                      <pre>{`<!-- 
Multi-line comment
Not visible in rendered Markdown
-->`}</pre>
                    </div>
                    <div className="p-4">
                      <p className="text-muted-foreground">Comments are not visible in the rendered output</p>
                      <p className="text-sm text-muted-foreground mt-4">Use comments to leave notes in your document that readers won't see</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </AppLayout>
  );
};

export default MarkdownCheatsheetPage;
</file>
<file name="Index.tsx" path="src\pages\Index.tsx">
import React from 'react';
import { useNavigate } from 'react-router-dom';

const Index = () => {
  const navigate = useNavigate();
  
  // Automatically redirect to the home page
  React.useEffect(() => {
    navigate('/');
  }, [navigate]);
  
  return null;
};

export default Index;
</file>
<file name="HomePage.tsx" path="src\pages\HomePage.tsx">
import React, { useState, useEffect } from 'react';
import AppLayout from '@/components/layout/AppLayout';
import { useNotes } from '@/context/NotesContextTypes';
import NotesList from '@/components/notes/NotesList';
import NoteEditor from '@/components/notes/NoteEditor';
import { Note } from '@/types';
import { Button } from '@/components/ui/button';
import { Plus, FileText } from 'lucide-react';
import { ResizablePanel, ResizableHandle } from '@/components/ui/resizable';

const HomePage: React.FC = () => {
  const { notes, activeNote, setActiveNote, addNote, deleteNote } = useNotes();
  const [isCreatingNote, setIsCreatingNote] = useState(false);
  const [starField, setStarField] = useState<React.ReactNode[]>([]);
  
  // Generate random stars for the background
  useEffect(() => {
    const stars = [];
    const count = 50;
    
    for (let i = 0; i < count; i++) {
      const size = Math.random() > 0.8 ? 'star-large' : Math.random() > 0.5 ? 'star-medium' : 'star-small';
      const delay = `${Math.random() * 5}s`;
      
      stars.push(
        <div 
          key={i}
          className={`star ${size}`}
          style={{
            top: `${Math.random() * 100}%`,
            left: `${Math.random() * 100}%`,
            animationDelay: delay,
          }}
        />
      );
    }
    
    setStarField(stars);
  }, []);
  
  const handleSelectNote = (note: Note) => {
    setActiveNote(note);
    setIsCreatingNote(false);
  };
  
  const handleCreateNote = () => {
    setActiveNote(null);
    setIsCreatingNote(true);
  };
  
  const handleSaveNewNote = (note: Note) => {
    setActiveNote(note);
    setIsCreatingNote(false);
  };
  
  const handleDeleteNote = (id: string) => {
    deleteNote(id);
  };
  
  return (
    <AppLayout>
      <ResizablePanel defaultSize={25} minSize={15} maxSize={40}>
        <div className="h-full flex flex-col">
          <div className="flex-1 overflow-hidden">
            <NotesList
              notes={notes}
              activeNoteId={activeNote?.id || null}
              onSelectNote={handleSelectNote}
              onDeleteNote={handleDeleteNote}
            />
          </div>
        </div>
      </ResizablePanel>
      
      <ResizableHandle withHandle className="bg-border/30 hover:bg-primary/50 transition-colors" />
      
      <ResizablePanel defaultSize={75}>
        <div className="h-full border-l border-border/30 relative">
          {starField}
          
          {isCreatingNote ? (
            <NoteEditor isNew={true} onSave={handleSaveNewNote} />
          ) : activeNote ? (
            <NoteEditor note={activeNote} />
          ) : (
            <div className="h-full flex flex-col items-center justify-center p-8 text-center relative z-10">
              <div className="w-24 h-24 mb-6 rounded-full bg-gradient-to-br from-cosmos-nebula to-cosmos-stardust cosmic-glow flex items-center justify-center float animate-float">
                <FileText className="w-8 h-8 text-white" />
              </div>
              <h2 className="text-2xl font-bold mb-2 bg-gradient-to-r from-white to-primary/80 bg-clip-text text-transparent animate-fade-in">Welcome to Notara</h2>
              <p className="text-muted-foreground mb-6 max-w-md animate-slide-up">
                Create and organize your notes with a beautiful cosmic-themed interface. 
                Get started by selecting a note or creating a new one.
              </p>
              <Button 
                onClick={handleCreateNote}
                className="bg-gradient-to-r from-primary to-cosmos-nebula hover:from-cosmos-nebula hover:to-primary transition-all duration-500 animate-slide-up btn-glow"
              >
                <Plus className="w-4 h-4 mr-2" />
                Create Your First Note
              </Button>
            </div>
          )}
        </div>
      </ResizablePanel>
    </AppLayout>
  );
};

export default HomePage;
</file>
<file name="ConstellationsPage.tsx" path="src\pages\ConstellationsPage.tsx">
import React from 'react';
import AppLayout from '@/components/layout/AppLayout';
import ConstellationView from '@/components/constellation/ConstellationView';

const ConstellationsPage: React.FC = () => {
  return (
    <AppLayout>
      <div className="h-full">
        <ConstellationView />
      </div>
    </AppLayout>
  );
};

export default ConstellationsPage;
</file>
<file name="ThemeSwitcher.tsx" path="src\components\ui-custom\ThemeSwitcher.tsx">
import React, { useState, useEffect } from 'react';
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger
} from '@/components/ui/dropdown-menu';
import { Palette } from 'lucide-react';

interface Theme {
  name: string;
  class: string;
  icon: React.ReactNode;
}

const themes: Theme[] = [
  {
    name: "Deep Space",
    class: "theme-deepspace",
    icon: <div className="w-5 h-5 rounded-full bg-[#9b87f5] cosmic-glow" />
  },
  {
    name: "Nebula",
    class: "theme-nebula",
    icon: <div className="w-5 h-5 rounded-full bg-[#0EA5E9] nebula-glow" />
  },
  {
    name: "Emerald Galaxy",
    class: "theme-emerald",
    icon: <div className="w-5 h-5 rounded-full bg-[#10B981]" />
  },
  {
    name: "Ultraviolet",
    class: "theme-ultraviolet",
    icon: <div className="w-5 h-5 rounded-full bg-[#D946EF] nova-glow" />
  },
  {
    name: "Solar (Light)",
    class: "theme-solar",
    icon: <div className="w-5 h-5 rounded-full bg-[#F97316] solar-glow" />
  }
];

const ThemeSwitcher = () => {
  const [currentTheme, setCurrentTheme] = useState<Theme>(themes[0]);

  useEffect(() => {
    // Apply default theme on first load
    document.body.classList.add('theme-deepspace');
    
    const savedTheme = localStorage.getItem('notara-theme');
    if (savedTheme) {
      const theme = themes.find(t => t.class === savedTheme);
      if (theme) {
        setTheme(theme);
      }
    }
  }, []);

  const setTheme = (theme: Theme) => {
    // Remove all theme classes
    themes.forEach(t => {
      document.body.classList.remove(t.class);
    });
    
    // Add the selected theme class
    document.body.classList.add(theme.class);
    
    localStorage.setItem('notara-theme', theme.class);
    setCurrentTheme(theme);
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger className="flex items-center gap-2 px-3 py-2 rounded-md hover:bg-secondary/50 transition-all duration-300 hover:scale-105">
        <div className="flex items-center gap-2">
          {currentTheme.icon}
          <span className="hidden md:inline font-medium">{currentTheme.name}</span>
        </div>
        <Palette className="h-4 w-4 ml-1" />
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="animate-fade-in rounded-xl border border-primary/20 bg-card/95 backdrop-blur-sm">
        {themes.map((theme) => (
          <DropdownMenuItem 
            key={theme.name} 
            onClick={() => setTheme(theme)}
            className="flex items-center gap-3 hover:bg-primary/10 rounded-md transition-all duration-200 hover:translate-x-1"
          >
            {theme.icon}
            {theme.name}
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default ThemeSwitcher;
</file>
<file name="AuthDebug.tsx" path="src\components\ui-custom\AuthDebug.tsx">
import React, { useEffect, useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { checkSupabaseCredentials, supabase } from '@/lib/supabase';

export const AuthDebug: React.FC<{ onClose: () => void }> = ({ onClose }) => {
  const [envInfo, setEnvInfo] = useState({
    supabaseUrl: '',
    hasAnonKey: false,
    anonKeyLength: 0,
    githubClientId: !!import.meta.env.VITE_GITHUB_CLIENT_ID,
    appUrl: import.meta.env.VITE_APP_URL || window.location.origin
  });
  
  const [supabaseStatus, setSupabaseStatus] = useState<'checking' | 'ok' | 'error'>('checking');
  const [errorDetails, setErrorDetails] = useState<string | null>(null);

  useEffect(() => {
    // Check Supabase credentials
    const credentials = checkSupabaseCredentials();
    setEnvInfo(prev => ({
      ...prev,
      supabaseUrl: credentials.supabaseUrl || 'Not found',
      hasAnonKey: credentials.hasAnonKey,
      anonKeyLength: credentials.anonKeyLength
    }));

    // Test Supabase connection
    const testConnection = async () => {
      try {
        // Simple connection test
        const { error } = await supabase.from('_test_connection').select('*').limit(1).maybeSingle();
        
        if (error && error.code !== 'PGRST116') {
          // PGRST116 is expected since we're trying to access a non-existent table
          // Any other error indicates a real connection issue
          setSupabaseStatus('error');
          setErrorDetails(error.message);
        } else {
          setSupabaseStatus('ok');
        }
      } catch (err) {
        setSupabaseStatus('error');
        setErrorDetails(err instanceof Error ? err.message : String(err));
      }
    };

    testConnection();
  }, []);

  return (
    <Card className="w-full max-w-3xl mx-auto mt-8 border-cosmos-stardust bg-cosmos-deepspace/90 text-white">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <span>Authentication Diagnostic Tool</span>
          <Badge variant={supabaseStatus === 'ok' ? 'default' : 'destructive'}>
            {supabaseStatus === 'checking' ? 'Checking...' : 
             supabaseStatus === 'ok' ? 'Connection OK' : 'Connection Error'}
          </Badge>
        </CardTitle>
        <CardDescription className="text-cosmos-nebula">
          Use this tool to diagnose authentication issues
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-2">
            <h3 className="font-medium">Supabase Configuration</h3>
            <div className="space-y-1 text-sm">
              <p>URL: {envInfo.supabaseUrl.substring(0, 8)}...{envInfo.supabaseUrl.length > 10 ? envInfo.supabaseUrl.substring(envInfo.supabaseUrl.length - 8) : ''}</p>
              <p>API Key: {envInfo.hasAnonKey ? `Present (${envInfo.anonKeyLength} chars)` : 'Missing'}</p>
              <p>Connection: {supabaseStatus === 'checking' ? 'Testing...' : 
                            supabaseStatus === 'ok' ? 'Success' : 'Failed'}</p>
            </div>
          </div>
          <div className="space-y-2">
            <h3 className="font-medium">GitHub OAuth</h3>
            <div className="space-y-1 text-sm">
              <p>Client ID: {envInfo.githubClientId ? 'Present' : 'Missing'}</p>
              <p>Callback URL: {envInfo.appUrl}/auth/callback</p>
              <p><strong>Important:</strong> Make sure this callback URL is set in GitHub OAuth settings</p>
            </div>
          </div>
        </div>

        {errorDetails && (
          <div className="bg-red-900/30 border border-red-500 p-3 rounded-md text-sm">
            <h3 className="font-medium mb-1">Error Details:</h3>
            <pre className="whitespace-pre-wrap text-xs">{errorDetails}</pre>
          </div>
        )}

        <div className="bg-yellow-900/30 border border-yellow-500 p-3 rounded-md text-sm">
          <h3 className="font-medium mb-1">Common Issues:</h3>
          <ul className="list-disc list-inside space-y-1">
            <li>Invalid API key format or expired API key</li>
            <li>Incorrect OAuth redirect URL in GitHub settings</li>
            <li>GitHub OAuth app not verified</li>
            <li>CORS policy issues in Supabase settings</li>
          </ul>
        </div>
      </CardContent>
      <CardFooter className="flex justify-between">
        <Button variant="outline" onClick={onClose}>Close</Button>
        <Button onClick={() => window.location.reload()}>Refresh Page</Button>
      </CardFooter>
    </Card>
  );
};

export default AuthDebug; 
</file>
<file name="CalendarPage.tsx" path="src\pages\CalendarPage.tsx">
import React, { useState } from 'react';
import AppLayout from '@/components/layout/AppLayout';
import CalendarView from '@/components/notes/CalendarView';
import { ResizablePanel } from '@/components/ui/resizable';

const CalendarPage: React.FC = () => {
  return (
    <AppLayout>
      <ResizablePanel defaultSize={100} minSize={30}>
        <CalendarView />
      </ResizablePanel>
    </AppLayout>
  );
};

export default CalendarPage;
</file>
<file name="AuthPage.tsx" path="src\pages\AuthPage.tsx">
import React, { useState } from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '@/context/AuthContext';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Label } from '@/components/ui/label';
import { AlertTriangleIcon, BugIcon, GithubIcon } from 'lucide-react';
import AppLayout from '@/components/layout/AppLayout';
import AuthDebug from '@/components/ui-custom/AuthDebug';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

const AuthPage: React.FC = () => {
  const { user, signInWithEmail, signUpWithEmail, signInWithGithub, isAuthenticated } = useAuth();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showDebugger, setShowDebugger] = useState(false);

  // If user is already authenticated, redirect to home page
  if (isAuthenticated) {
    return <Navigate to="/" replace />;
  }

  const handleEmailAuth = async (isSignUp: boolean) => {
    setLoading(true);
    setError(null);
    try {
      if (isSignUp) {
        await signUpWithEmail(email, password);
      } else {
        await signInWithEmail(email, password);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Authentication failed');
    } finally {
      setLoading(false);
    }
  };

  const handleGithubAuth = async () => {
    setLoading(true);
    setError(null);
    try {
      await signInWithGithub();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'GitHub authentication failed');
    } finally {
      setLoading(false);
    }
  };

  return (
    <AppLayout>
      <div className="flex items-center justify-center h-full">
        <div className="w-full max-w-md p-4 space-y-4 relative z-10">
          <div className="w-24 h-24 mb-6 mx-auto rounded-full bg-gradient-to-br from-cosmos-nebula to-cosmos-stardust cosmic-glow flex items-center justify-center float animate-float">
            <span className="text-3xl">✨</span>
          </div>
          
          {showDebugger ? (
            <AuthDebug onClose={() => setShowDebugger(false)} />
          ) : (
            <Card className="bg-card/70 backdrop-blur-lg border-border/30">
              <CardHeader className="space-y-1 text-center">
                <CardTitle className="text-2xl font-bold bg-gradient-to-r from-white to-primary/80 bg-clip-text text-transparent">
                  Welcome to Notara
                </CardTitle>
                <CardDescription>
                  Sign in to access your cosmic notes
                </CardDescription>
              </CardHeader>
              
              <CardContent className="space-y-4">
                {error && (
                  <Alert variant="destructive" className="bg-red-900/30 border-red-500/50">
                    <AlertTriangleIcon className="h-4 w-4" />
                    <AlertTitle>Authentication Error</AlertTitle>
                    <AlertDescription>{error}</AlertDescription>
                  </Alert>
                )}
                
                <Tabs defaultValue="signin" className="w-full">
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="signin">Sign In</TabsTrigger>
                    <TabsTrigger value="signup">Sign Up</TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="signin" className="space-y-4 mt-4">
                    <div className="space-y-2">
                      <Label htmlFor="email">Email</Label>
                      <Input
                        id="email"
                        type="email"
                        placeholder="your@email.com"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="password">Password</Label>
                      <Input
                        id="password"
                        type="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                      />
                    </div>
                    <Button 
                      className="w-full bg-gradient-to-r from-primary to-cosmos-nebula hover:from-cosmos-nebula hover:to-primary transition-all duration-500"
                      onClick={() => handleEmailAuth(false)}
                      disabled={loading}
                    >
                      {loading ? 'Signing in...' : 'Sign In'}
                    </Button>
                  </TabsContent>
                  
                  <TabsContent value="signup" className="space-y-4 mt-4">
                    <div className="space-y-2">
                      <Label htmlFor="signup-email">Email</Label>
                      <Input
                        id="signup-email"
                        type="email"
                        placeholder="your@email.com"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="signup-password">Password</Label>
                      <Input
                        id="signup-password"
                        type="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                      />
                    </div>
                    <Button 
                      className="w-full bg-gradient-to-r from-primary to-cosmos-nebula hover:from-cosmos-nebula hover:to-primary transition-all duration-500"
                      onClick={() => handleEmailAuth(true)}
                      disabled={loading}
                    >
                      {loading ? 'Signing up...' : 'Sign Up'}
                    </Button>
                  </TabsContent>
                </Tabs>
                
                <div className="relative">
                  <div className="absolute inset-0 flex items-center">
                    <span className="w-full border-t border-border/50"></span>
                  </div>
                  <div className="relative flex justify-center text-xs uppercase">
                    <span className="bg-card px-2 text-muted-foreground">
                      Or continue with
                    </span>
                  </div>
                </div>
                
                <Button 
                  variant="outline" 
                  className="w-full space-x-2 bg-card hover:bg-muted/50"
                  onClick={handleGithubAuth}
                  disabled={loading}
                >
                  <GithubIcon className="h-4 w-4" />
                  <span>GitHub</span>
                </Button>
              </CardContent>
              
              <CardFooter className="flex flex-col gap-4">
                <p className="text-xs text-muted-foreground">
                  By signing in, you agree to our Terms of Service and Privacy Policy
                </p>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="text-xs text-muted-foreground hover:text-primary"
                  onClick={() => setShowDebugger(true)}
                >
                  <BugIcon className="h-3 w-3 mr-1" />
                  Debug Authentication
                </Button>
              </CardFooter>
            </Card>
          )}
        </div>
      </div>
    </AppLayout>
  );
};

export default AuthPage; 
</file>
<file name="dropdown-menu.tsx" path="src\components\ui\dropdown-menu.tsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>
<file name="form.tsx" path="src\components\ui\form.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>
<file name="dialog.tsx" path="src\components\ui\dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>
<file name="SettingsPage.tsx" path="src\components\settings\SettingsPage.tsx">
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Separator } from '@/components/ui/separator';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Github, LogOut, ExternalLink, Copy, Share2, Save, Download, UserCircle } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { useAuth } from '@/context/AuthContext';
import { supabase } from '@/lib/supabase';

const SettingsPage: React.FC = () => {
  const [theme, setTheme] = useState('dark');
  const [fontSize, setFontSize] = useState('16');
  const [autoSave, setAutoSave] = useState(true);
  const [spellCheck, setSpellCheck] = useState(true);
  const [exportFormat, setExportFormat] = useState('markdown');
  const [supabaseUrl, setSupabaseUrl] = useState('');
  const [supabaseKey, setSupabaseKey] = useState('');

  const { user, isAuthenticated, signInWithGithub, signOut } = useAuth();

  const handleSaveSettings = () => {
    toast({
      title: "Settings saved",
      description: "Your settings have been updated successfully."
    });
  };

  const handleResetSettings = () => {
    setTheme('dark');
    setFontSize('16');
    setAutoSave(true);
    setSpellCheck(true);
    setExportFormat('markdown');
    
    toast({
      title: "Settings reset",
      description: "Your settings have been reset to defaults."
    });
  };

  const handleConnectSupabase = () => {
    if (!supabaseUrl || !supabaseKey) {
      toast({
        title: "Missing credentials",
        description: "Please enter both Supabase URL and API key",
        variant: "destructive"
      });
      return;
    }

    // Initialize Supabase with the provided credentials
    // This would typically update the supabase client in a real app
    toast({
      title: "Supabase connected",
      description: "Your Supabase credentials have been saved."
    });
  };

  const handleExportData = () => {
    toast({
      title: "Export successful",
      description: `Your data has been exported in ${exportFormat} format.`
    });
  };

  const handleShareApp = () => {
    navigator.clipboard.writeText(window.location.origin);
    toast({
      title: "Link copied",
      description: "App link copied to clipboard"
    });
  };

  const handleConnectGDrive = () => {
    toast({
      title: "Google Drive integration",
      description: isAuthenticated ? "Connecting to Google Drive..." : "Please sign in first to connect to Google Drive."
    });
  };

  const handleConnectDropbox = () => {
    toast({
      title: "Dropbox integration",
      description: isAuthenticated ? "Connecting to Dropbox..." : "Please sign in first to connect to Dropbox."
    });
  };

  return (
    <div className="container mx-auto px-4 py-6 space-y-6 max-w-5xl">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold">Settings</h1>
      </div>

      <Tabs defaultValue="appearance" className="w-full">
        <TabsList className="grid grid-cols-5 w-full">
          <TabsTrigger value="appearance">Appearance</TabsTrigger>
          <TabsTrigger value="editor">Editor</TabsTrigger>
          <TabsTrigger value="account">Account</TabsTrigger>
          <TabsTrigger value="integrations">Integrations</TabsTrigger>
          <TabsTrigger value="about">About</TabsTrigger>
        </TabsList>

        <div className="mt-6">
          <TabsContent value="appearance" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Theme Settings</CardTitle>
                <CardDescription>Customize how Notara looks</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="theme">Theme</Label>
                  <Select value={theme} onValueChange={setTheme}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select theme" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="light">Light</SelectItem>
                      <SelectItem value="dark">Dark</SelectItem>
                      <SelectItem value="system">System</SelectItem>
                      <SelectItem value="cosmic">Cosmic</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="font-size">Font Size</Label>
                  <Select value={fontSize} onValueChange={setFontSize}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select font size" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="12">Small (12px)</SelectItem>
                      <SelectItem value="14">Medium (14px)</SelectItem>
                      <SelectItem value="16">Large (16px)</SelectItem>
                      <SelectItem value="18">X-Large (18px)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="flex items-center justify-between">
                  <Label htmlFor="animations">Enable Animations</Label>
                  <Switch id="animations" defaultChecked />
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button variant="outline" onClick={handleResetSettings}>Reset</Button>
                <Button onClick={handleSaveSettings}>Save Changes</Button>
              </CardFooter>
            </Card>
          </TabsContent>

          <TabsContent value="editor" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Editor Settings</CardTitle>
                <CardDescription>Customize your writing experience</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <Label htmlFor="autosave">Auto Save</Label>
                  <Switch 
                    id="autosave" 
                    checked={autoSave} 
                    onCheckedChange={setAutoSave} 
                  />
                </div>
                
                <div className="flex items-center justify-between">
                  <Label htmlFor="spellcheck">Spell Check</Label>
                  <Switch 
                    id="spellcheck" 
                    checked={spellCheck} 
                    onCheckedChange={setSpellCheck} 
                  />
                </div>

                <div className="flex items-center justify-between">
                  <Label htmlFor="markdown-preview">Live Markdown Preview</Label>
                  <Switch id="markdown-preview" defaultChecked />
                </div>

                <div className="flex items-center justify-between">
                  <Label htmlFor="line-numbers">Show Line Numbers</Label>
                  <Switch id="line-numbers" />
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button variant="outline" onClick={handleResetSettings}>Reset</Button>
                <Button onClick={handleSaveSettings}>Save Changes</Button>
              </CardFooter>
            </Card>
          </TabsContent>

          <TabsContent value="account" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Account Settings</CardTitle>
                <CardDescription>Manage your account</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {isAuthenticated ? (
                  <div className="space-y-4">
                    <div className="flex items-center space-x-4">
                      <div className="w-12 h-12 rounded-full bg-gradient-to-br from-cosmos-nebula via-cosmos-aurora to-cosmos-stardust flex items-center justify-center font-medium text-white">
                        {user?.user_metadata?.full_name?.[0] || user?.email?.[0]?.toUpperCase() || 'U'}
                      </div>
                      <div>
                        <p className="font-medium">{user?.user_metadata?.full_name || user?.email}</p>
                        <p className="text-sm text-muted-foreground">{user?.email}</p>
                      </div>
                    </div>
                    
                    <Separator />
                    
                    <Link to="/settings/profile" className="w-full">
                      <Button 
                        variant="outline" 
                        className="w-full flex items-center gap-2 justify-center"
                      >
                        <UserCircle size={16} />
                        Manage Profile
                      </Button>
                    </Link>
                    
                    <Button 
                      onClick={signOut} 
                      variant="destructive" 
                      className="w-full flex items-center gap-2 justify-center"
                    >
                      <LogOut size={16} />
                      Sign Out
                    </Button>
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label>Supabase Credentials</Label>
                      <p className="text-sm text-muted-foreground mb-2">
                        Enter your Supabase credentials to enable authentication and data sync.
                      </p>
                      <Input
                        placeholder="Supabase URL"
                        value={supabaseUrl}
                        onChange={(e) => setSupabaseUrl(e.target.value)}
                        className="mb-2"
                      />
                      <Input
                        type="password"
                        placeholder="Supabase API Key"
                        value={supabaseKey}
                        onChange={(e) => setSupabaseKey(e.target.value)}
                      />
                      <Button onClick={handleConnectSupabase} className="w-full mt-2">
                        Connect Supabase
                      </Button>
                    </div>
                    
                    <Separator />
                    
                    <div>
                      <p className="text-sm text-muted-foreground mb-4">
                        Sign in to enable sync across devices and other features.
                      </p>
                      <Button onClick={signInWithGithub} variant="outline" className="w-full flex items-center gap-2">
                        <Github size={16} />
                        Sign in with GitHub
                      </Button>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="integrations" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>External Integrations</CardTitle>
                <CardDescription>Connect to external services</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <div>
                      <h3 className="font-medium">GitHub</h3>
                      <p className="text-sm text-muted-foreground">Sync your notes with GitHub repositories</p>
                    </div>
                    <Button 
                      onClick={isAuthenticated ? () => {} : signInWithGithub} 
                      variant="outline" 
                      className="flex items-center gap-2"
                    >
                      <Github size={16} />
                      {isAuthenticated ? "Connected" : "Connect"}
                    </Button>
                  </div>
                </div>
                
                <Separator />
                
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <div>
                      <h3 className="font-medium">Google Drive</h3>
                      <p className="text-sm text-muted-foreground">Back up notes to Google Drive</p>
                    </div>
                    <Button onClick={handleConnectGDrive} variant="outline" className="flex items-center gap-2">
                      <ExternalLink size={16} />
                      Connect
                    </Button>
                  </div>
                </div>
                
                <Separator />
                
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <div>
                      <h3 className="font-medium">Dropbox</h3>
                      <p className="text-sm text-muted-foreground">Sync notes with Dropbox</p>
                    </div>
                    <Button onClick={handleConnectDropbox} variant="outline" className="flex items-center gap-2">
                      <ExternalLink size={16} />
                      Connect
                    </Button>
                  </div>
                </div>
                
                <Separator />
                
                <div className="space-y-2">
                  <Label>Export Data</Label>
                  <div className="flex gap-2">
                    <Select value={exportFormat} onValueChange={setExportFormat}>
                      <SelectTrigger className="w-[180px]">
                        <SelectValue placeholder="Select format" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="markdown">Markdown (.md)</SelectItem>
                        <SelectItem value="json">JSON</SelectItem>
                        <SelectItem value="pdf">PDF</SelectItem>
                        <SelectItem value="html">HTML</SelectItem>
                      </SelectContent>
                    </Select>
                    <Button onClick={handleExportData} className="flex items-center gap-2">
                      <Download size={16} />
                      Export
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="about" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>About Notara</CardTitle>
                <CardDescription>App information and links</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h3 className="font-medium text-lg mb-2">Notara</h3>
                  <p className="text-muted-foreground">Version 1.0.0</p>
                  <p className="text-muted-foreground mt-4">
                    A beautiful note-taking app with a cosmic theme and powerful features.
                  </p>
                </div>
                
                <Separator />
                
                <div className="space-y-2">
                  <h3 className="font-medium">Share Notara</h3>
                  <Button onClick={handleShareApp} variant="outline" className="flex items-center gap-2">
                    <Share2 size={16} />
                    Copy Link
                  </Button>
                </div>
                
                <Separator />
                
                <div className="space-y-2">
                  <h3 className="font-medium">Support</h3>
                  <div className="flex flex-col gap-2">
                    <Button variant="link" className="h-auto p-0 justify-start" asChild>
                      <a href="/markdown-cheatsheet" className="flex items-center gap-2">
                        <ExternalLink size={14} />
                        Markdown Cheatsheet
                      </a>
                    </Button>
                    <Button variant="link" className="h-auto p-0 justify-start" asChild>
                      <a href="#" className="flex items-center gap-2">
                        <ExternalLink size={14} />
                        Report an Issue
                      </a>
                    </Button>
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <p className="text-xs text-muted-foreground">
                  © {new Date().getFullYear()} Notara. All rights reserved.
                </p>
              </CardFooter>
            </Card>
          </TabsContent>
        </div>
      </Tabs>
    </div>
  );
};

export default SettingsPage;
</file>
<file name="ProfileSettings.tsx" path="src\components\settings\ProfileSettings.tsx">
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { useAuth } from '@/context/AuthContext';
import { Github, Mail, UserCircle } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { Separator } from '@/components/ui/separator';

const ProfileSettings = () => {
  const { user, isAuthenticated } = useAuth();
  const [displayName, setDisplayName] = useState<string>('');
  const [avatarUrl, setAvatarUrl] = useState<string>('');
  const [saving, setSaving] = useState<boolean>(false);

  useEffect(() => {
    if (user) {
      // Initialize form with user data
      setDisplayName(
        user.user_metadata?.full_name || 
        user.user_metadata?.name || 
        user.email?.split('@')[0] || 
        ''
      );
      setAvatarUrl(user.user_metadata?.avatar_url || '');
    }
  }, [user]);

  const getUserInitials = () => {
    if (!user) return '?';
    
    const name = user.user_metadata?.full_name || user.email || '';
    if (!name) return '?';
    
    if (name.includes('@')) {
      // If it's an email, use first letter of email
      return name.substring(0, 1).toUpperCase();
    }
    
    // If it's a name, use initials
    const parts = name.split(' ');
    if (parts.length === 1) return parts[0].substring(0, 1).toUpperCase();
    return (parts[0][0] + parts[parts.length - 1][0]).toUpperCase();
  };

  const getAuthMethod = () => {
    if (!user) return '';
    
    if (user.app_metadata?.provider === 'github') {
      return 'GitHub';
    } else if (user.email) {
      return 'Email';
    }
    
    return '';
  };

  const handleSaveProfile = async () => {
    setSaving(true);
    try {
      // In a real implementation, you would update the user metadata via Supabase
      // For now, we'll just show a success message
      toast({
        title: "Profile updated",
        description: "Your profile information has been saved.",
      });
    } catch (error) {
      console.error("Error updating profile:", error);
      toast({
        title: "Update failed",
        description: "There was an error updating your profile.",
        variant: "destructive"
      });
    } finally {
      setSaving(false);
    }
  };

  if (!isAuthenticated) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Profile Settings</CardTitle>
          <CardDescription>Sign in to manage your profile</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center p-8">
            <div className="text-center">
              <UserCircle className="h-16 w-16 mx-auto mb-4 text-muted-foreground" />
              <p className="text-muted-foreground">
                You need to sign in to access your profile settings.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="backdrop-blur-md bg-card/80">
      <CardHeader>
        <CardTitle>Profile Settings</CardTitle>
        <CardDescription>Manage your personal information</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="flex flex-col items-center space-y-4 sm:flex-row sm:space-y-0 sm:space-x-4">
          <Avatar className="h-24 w-24 cosmic-glow">
            {avatarUrl ? (
              <AvatarImage src={avatarUrl} alt={displayName} />
            ) : (
              <AvatarFallback className="text-xl bg-gradient-to-br from-cosmos-nebula to-cosmos-stardust">
                {getUserInitials()}
              </AvatarFallback>
            )}
          </Avatar>
          <div className="space-y-2 text-center sm:text-left">
            <h3 className="text-xl font-medium">{displayName || 'User'}</h3>
            <div className="flex items-center justify-center sm:justify-start space-x-1 text-sm text-muted-foreground">
              {getAuthMethod() === 'GitHub' ? (
                <>
                  <Github className="h-4 w-4" />
                  <span>GitHub Account</span>
                </>
              ) : (
                <>
                  <Mail className="h-4 w-4" />
                  <span>Email Account</span>
                </>
              )}
            </div>
            <div className="text-sm text-muted-foreground">{user?.email}</div>
          </div>
        </div>

        <Separator />

        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="display-name">Display Name</Label>
            <Input
              id="display-name"
              value={displayName}
              onChange={(e) => setDisplayName(e.target.value)}
              placeholder="Your display name"
            />
            <p className="text-xs text-muted-foreground">
              This is how your name will appear in the app.
            </p>
          </div>

          {getAuthMethod() !== 'GitHub' && (
            <div className="space-y-2">
              <Label htmlFor="avatar-url">Avatar URL</Label>
              <Input
                id="avatar-url"
                value={avatarUrl}
                onChange={(e) => setAvatarUrl(e.target.value)}
                placeholder="https://example.com/your-avatar.jpg"
              />
              <p className="text-xs text-muted-foreground">
                Enter a URL to an image to use as your avatar.
              </p>
            </div>
          )}
        </div>

        <div className="space-y-2">
          <Label>Account Information</Label>
          <div className="rounded-md bg-secondary/30 p-4 space-y-2">
            <div className="flex justify-between">
              <span className="text-sm">User ID</span>
              <span className="text-sm font-mono text-muted-foreground">{user?.id}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-sm">Authentication Method</span>
              <span className="text-sm font-medium">{getAuthMethod()}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-sm">Email</span>
              <span className="text-sm">{user?.email}</span>
            </div>
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex justify-between">
        <Button variant="outline">Cancel</Button>
        <Button 
          onClick={handleSaveProfile} 
          disabled={saving}
          className="bg-gradient-to-r from-primary to-cosmos-nebula hover:from-cosmos-nebula hover:to-primary transition-all duration-500"
        >
          {saving ? 'Saving...' : 'Save Changes'}
        </Button>
      </CardFooter>
    </Card>
  );
};

export default ProfileSettings; 
</file>
<file name="context-menu.tsx" path="src\components\ui\context-menu.tsx">
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>
<file name="command.tsx" path="src\components\ui\command.tsx">
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>
<file name="collapsible.tsx" path="src\components\ui\collapsible.tsx">
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>
<file name="checkbox.tsx" path="src\components\ui\checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>
<file name="chart.tsx" path="src\components\ui\chart.tsx">
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>
<file name="carousel.tsx" path="src\components\ui\carousel.tsx">
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>
<file name="card.tsx" path="src\components\ui\card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>
<file name="calendar.tsx" path="src\components\ui\calendar.tsx">
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <div className="flex flex-col w-full">
      <DayPicker
        showOutsideDays={showOutsideDays}
        className={cn("p-3", className)}
        classNames={{
          months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
          month: "space-y-4",
          caption: "flex justify-center pt-1 relative items-center",
          caption_label: "text-sm font-medium",
          nav: "space-x-1 flex items-center",
          nav_button: cn(
            buttonVariants({ variant: "outline" }),
            "h-9 w-9 bg-transparent p-0 opacity-50 hover:opacity-100"
          ),
          nav_button_previous: "absolute left-1",
          nav_button_next: "absolute right-1",
          table: "border-collapse space-y-1",
          head_row: "flex",
          head_cell:
            "text-muted-foreground rounded-md w-12 font-normal text-[0.9rem]",
          row: "flex w-full mt-2",
          cell: "h-12 w-12 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
          day: cn(
            buttonVariants({ variant: "ghost" }),
            "h-12 w-12 p-0 font-normal aria-selected:opacity-100"
          ),
          day_range_end: "day-range-end",
          day_selected:
            "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
          day_today: "bg-accent text-accent-foreground",
          day_outside:
            "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
          day_disabled: "text-muted-foreground opacity-50",
          day_range_middle:
            "aria-selected:bg-accent aria-selected:text-accent-foreground",
          day_hidden: "invisible",
          ...classNames,
        }}
        components={{
          IconLeft: ({ ..._props }) => <ChevronLeft className="h-5 w-5" />,
          IconRight: ({ ..._props }) => <ChevronRight className="h-5 w-5" />,
        }}
        {...props}
      />
    </div>
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
</file>
<file name="button.tsx" path="src\components\ui\button.tsx">
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        cosmic: "bg-gradient-to-r from-primary to-primary/80 text-white hover:from-primary hover:to-primary/70 transition-all shadow-md hover:shadow-lg hover:shadow-primary/20",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };
</file>
<file name="breadcrumb.tsx" path="src\components\ui\breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>
<file name="badge.tsx" path="src\components\ui\badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>
<file name="avatar.tsx" path="src\components\ui\avatar.tsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>
<file name="aspect-ratio.tsx" path="src\components\ui\aspect-ratio.tsx">
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>
<file name="alert.tsx" path="src\components\ui\alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>
<file name="alert-dialog.tsx" path="src\components\ui\alert-dialog.tsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>
<file name="accordion.tsx" path="src\components\ui\accordion.tsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>
<file name="AuthCallbackPage.tsx" path="src\pages\AuthCallbackPage.tsx">
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { supabase } from '@/lib/supabase';
import { useAuth } from '@/context/AuthContext';
import { AlertCircleIcon } from 'lucide-react';

const AuthCallbackPage: React.FC = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const handleAuthCallback = async () => {
      try {
        // Get the URL hash and log for debugging
        const hash = window.location.hash;
        if (hash) {
          console.log('Auth callback hash:', hash);
        }

        // Get the URL parameters
        const url = new URL(window.location.href);
        const errorParam = url.searchParams.get('error');
        const errorDescription = url.searchParams.get('error_description');
        
        if (errorParam) {
          console.error(`Auth error: ${errorParam} - ${errorDescription}`);
          setError(`${errorParam}: ${errorDescription}`);
          return;
        }

        // Get the auth callback code
        const code = url.searchParams.get('code');
        if (!code) {
          console.log('No auth code found in URL');
        }

        // Exchange the code for a session (Supabase will handle this automatically)
        const { data, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('Error processing auth callback:', error);
          setError(error.message);
          return;
        }

        console.log('Auth callback successful', !!data.session);
        
        // Navigate back to home after a successful authentication
        const timer = setTimeout(() => {
          navigate('/');
        }, 2000);
        
        return () => clearTimeout(timer);
      } catch (err) {
        console.error('Unexpected error during auth callback:', err);
        setError(err instanceof Error ? err.message : 'Authentication error');
      }
    };

    handleAuthCallback();
  }, [navigate]);

  // If user is already authenticated or becomes authenticated during callback,
  // set a timer to redirect them home
  useEffect(() => {
    if (user) {
      const timer = setTimeout(() => {
        navigate('/');
      }, 1500);
      
      return () => clearTimeout(timer);
    }
  }, [user, navigate]);

  return (
    <div className="h-screen flex flex-col items-center justify-center bg-cosmos-deepspace">
      <div className="w-24 h-24 mb-8 rounded-full bg-gradient-to-br from-cosmos-stardust to-cosmos-aurora animate-pulse flex items-center justify-center">
        <div className="w-12 h-12 rounded-full bg-cosmos-deepspace animate-ping"></div>
      </div>
      
      {error ? (
        <>
          <div className="flex items-center gap-2 mb-4">
            <AlertCircleIcon className="text-red-500" />
            <h1 className="text-3xl font-bold text-white">Authentication Error</h1>
          </div>
          <p className="text-red-300 mb-8 text-center max-w-md px-4">
            {error}
          </p>
        </>
      ) : (
        <>
          <h1 className="text-3xl font-bold mb-4 text-white">Logging you in...</h1>
          <p className="text-muted-foreground mb-8 text-center max-w-md px-4">
            You will be redirected back to Notara momentarily.
            <br />
            If you are not redirected, click the button below.
          </p>
        </>
      )}
      
      <Button onClick={() => navigate('/')}>
        Return to Notara
      </Button>
    </div>
  );
};

export default AuthCallbackPage;
</file>
<file name="drawer.tsx" path="src\components\ui\drawer.tsx">
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>
<file name="AiAssistantPage.tsx" path="src\pages\AiAssistantPage.tsx">
import React from 'react';
import AppLayout from '@/components/layout/AppLayout';
import AiAssistant from '@/components/ai/AiAssistant';

const AiAssistantPage: React.FC = () => {
  return (
    <AppLayout>
      <div className="h-full">
        <AiAssistant />
      </div>
    </AppLayout>
  );
};

export default AiAssistantPage;
</file>
<file name="MarkdownPreview.tsx" path="src\components\notes\MarkdownPreview.tsx">
import React from 'react';
import ReactMarkdown from 'react-markdown';
import { cn } from '@/lib/utils';

interface MarkdownPreviewProps {
  content: string;
  className?: string;
}

const MarkdownPreview: React.FC<MarkdownPreviewProps> = ({ content, className }) => {
  return (
    <div className={cn('markdown-content', className)}>
      <ReactMarkdown>{content}</ReactMarkdown>
    </div>
  );
};

export default MarkdownPreview;
</file>
<file name="NoteEditor.tsx" path="src\components\notes\NoteEditor.tsx">
import React, { useState, useEffect } from 'react';
import { useNotes } from '@/context/NotesContextTypes';
import { Note } from '@/types';
import { Button } from '@/components/ui/button';
import TagSelector from './TagSelector';
import MarkdownPreview from './MarkdownPreview';

interface NoteEditorProps {
  note?: Note;
  isNew?: boolean;
  onSave?: (note: Note) => void;
}

const NoteEditor: React.FC<NoteEditorProps> = ({ note, isNew = false, onSave }) => {
  const { addNote, updateNote, tags } = useNotes();
  const [title, setTitle] = useState(note?.title || '');
  const [content, setContent] = useState(note?.content || '');
  const [selectedTags, setSelectedTags] = useState(note?.tags || []);
  const [isPinned, setIsPinned] = useState(note?.isPinned || false);
  const [isPreview, setIsPreview] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    if (note) {
      setTitle(note.title);
      setContent(note.content);
      setSelectedTags(note.tags);
      setIsPinned(note.isPinned);
    }
  }, [note]);

  const handleSave = () => {
    setIsSaving(true);
    
    const saveData = {
      title: title || 'Untitled',
      content,
      tags: selectedTags,
      isPinned
    };

    let savedNote;

    if (isNew) {
      savedNote = addNote(saveData);
    } else if (note) {
      updateNote(note.id, saveData);
      savedNote = { ...note, ...saveData };
    }

    setIsSaving(false);
    
    if (onSave && savedNote) {
      onSave(savedNote as Note);
    }
  };

  const togglePin = () => {
    setIsPinned(!isPinned);
  };

  const togglePreview = () => {
    setIsPreview(!isPreview);
  };

  return (
    <div className="h-full flex flex-col">
      <div className="p-4 border-b border-border flex justify-between items-center">
        <div className="flex items-center gap-2">
          <button
            onClick={togglePin}
            className={`p-2 rounded-md ${
              isPinned ? 'text-primary' : 'text-muted-foreground'
            }`}
            aria-label={isPinned ? 'Unpin note' : 'Pin note'}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill={isPinned ? 'currentColor' : 'none'} stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className=""><path d="M12 3L10 14 14 14 12 21 12 21 14 11 10 11 12 3z" transform="rotate(45, 12, 12)"></path></svg>
          </button>
          <div className="flex gap-2">
            <Button
              onClick={togglePreview}
              variant="ghost"
              size="sm"
              className={isPreview ? 'bg-secondary' : ''}
            >
              Preview
            </Button>
          </div>
        </div>
        <div className="flex gap-2">
          <TagSelector
            selectedTags={selectedTags}
            onChange={setSelectedTags}
            availableTags={tags}
          />
          <Button
            onClick={handleSave}
            disabled={isSaving}
            className="ml-2"
            size="sm"
          >
            {isSaving ? 'Saving...' : 'Save'}
          </Button>
        </div>
      </div>

      <div className="p-4 flex-1 overflow-auto">
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          placeholder="Note Title"
          className="w-full text-2xl font-bold mb-4 bg-transparent border-none outline-none focus:ring-0"
        />

        {isPreview ? (
          <MarkdownPreview content={content} />
        ) : (
          <textarea
            value={content}
            onChange={(e) => setContent(e.target.value)}
            placeholder="Start typing..."
            className="w-full h-[calc(100%-4rem)] bg-transparent border-none outline-none resize-none font-mono focus:ring-0"
          />
        )}
      </div>
    </div>
  );
};

export default NoteEditor;
</file>
<file name="CalendarView.tsx" path="src\components\notes\CalendarView.tsx">
import React, { useState } from 'react';
import { Calendar } from '@/components/ui/calendar';
import { useNotes } from '@/context/NotesContextTypes';
import { format } from 'date-fns';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { CalendarIcon, Clock } from 'lucide-react';
import { ResizablePanelGroup, ResizablePanel, ResizableHandle } from '@/components/ui/resizable';
import { cn } from '@/lib/utils';

const CalendarView: React.FC = () => {
  const [date, setDate] = useState<Date | undefined>(new Date());
  const { notes, addNote } = useNotes();
  const [isAddingEvent, setIsAddingEvent] = useState(false);
  const [eventTitle, setEventTitle] = useState('');
  const [eventContent, setEventContent] = useState('');
  const [eventTime, setEventTime] = useState('');
  
  // Filter notes for the selected date
  const notesOnDate = notes.filter(note => {
    if (!date) return false;
    const noteDate = new Date(note.createdAt);
    return (
      noteDate.getDate() === date.getDate() &&
      noteDate.getMonth() === date.getMonth() &&
      noteDate.getFullYear() === date.getFullYear()
    );
  });

  const handleAddEvent = () => {
    if (!eventTitle.trim() || !date) return;
    
    const eventDate = new Date(date.setHours(
      parseInt(eventTime.split(':')[0] || '0'),
      parseInt(eventTime.split(':')[1] || '0')
    ));
    
    addNote({
      title: eventTitle,
      content: eventContent,
      tags: [],
      isPinned: false,
      createdAt: eventDate.toISOString()
    });
    
    setEventTitle('');
    setEventContent('');
    setEventTime('');
    setIsAddingEvent(false);
  };
  
  return (
    <div className="flex flex-col h-full p-4 space-y-4 overflow-x-hidden">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold flex items-center gap-2">
          <CalendarIcon className="h-5 w-5 text-primary" />
          Calendar
        </h2>
        <Button onClick={() => setIsAddingEvent(true)}>
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2"><line x1="12" y1="5" x2="12" y2="19"/><line x1="5" y1="12" x2="19" y2="12"/></svg>
          Add Event
        </Button>
      </div>
      
      <ResizablePanelGroup
        direction="horizontal"
        className="h-[calc(100%-3rem)] w-full"
      >
        <ResizablePanel 
          defaultSize={45} 
          minSize={40}
          className="bg-card/50 rounded-lg border border-border/50 backdrop-blur-sm shadow-lg cosmic-glow min-w-[400px]"
        >
          <div className="p-4 h-full flex flex-col items-center pt-8">
            <div className="calendar-wrapper w-full max-w-[380px]">
              <Calendar
                mode="single"
                selected={date}
                onSelect={setDate}
                className={cn(
                  "mx-auto border-none bg-transparent",
                  "w-full [&_.rdp-caption]:text-xl [&_.rdp-caption]:font-semibold"
                )}
              />
              
              <div className="text-center mt-6">
                <h3 className="text-xl font-medium">
                  {date ? format(date, 'MMMM d, yyyy') : 'Select a date'}
                </h3>
                <p className="text-sm text-muted-foreground mt-1">
                  Click on a date to view or add events
                </p>
              </div>
            </div>
          </div>
        </ResizablePanel>
        
        <ResizableHandle withHandle className="bg-border/30 hover:bg-primary/50 transition-colors" />
        
        <ResizablePanel defaultSize={55} className="bg-card/30 rounded-lg p-4 border border-border/50 flex flex-col min-w-[300px]">
          <h3 className="text-md font-semibold mb-3 px-2">
            {date ? `Events for ${format(date, 'MMMM d, yyyy')}` : 'Select a date'}
          </h3>
          
          {notesOnDate.length > 0 ? (
            <div className="space-y-3 overflow-y-auto flex-1">
              {notesOnDate.map(note => {
                const noteTime = new Date(note.createdAt);
                return (
                  <Card key={note.id} className="bg-secondary/30 hover:bg-secondary/40 transition-colors border-border/50 cosmic-glow">
                    <CardContent className="p-3">
                      <div className="flex justify-between items-start">
                        <h4 className="font-medium">{note.title}</h4>
                        <div className="text-sm text-muted-foreground flex items-center">
                          <Clock className="h-3 w-3 mr-1" />
                          {format(noteTime, 'h:mm a')}
                        </div>
                      </div>
                      <p className="text-sm text-muted-foreground mt-1">{note.content.substring(0, 100)}</p>
                      <div className="flex gap-1 mt-1">
                        {note.tags.map(tag => (
                          <span 
                            key={tag.id} 
                            className="px-1.5 py-0.5 text-xs rounded-full" 
                            style={{ backgroundColor: `${tag.color}30`, color: tag.color }}
                          >
                            {tag.name}
                          </span>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          ) : (
            <div className="text-center py-8 text-muted-foreground flex-1 flex flex-col items-center justify-center">
              <p>No events for this date</p>
              <Button variant="link" onClick={() => setIsAddingEvent(true)} className="mt-2">
                Add an event
              </Button>
            </div>
          )}
        </ResizablePanel>
      </ResizablePanelGroup>
      
      <Dialog open={isAddingEvent} onOpenChange={setIsAddingEvent}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Add Event for {date ? format(date, 'MMMM d, yyyy') : 'Selected Date'}</DialogTitle>
          </DialogHeader>
          
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <label htmlFor="event-title" className="text-sm font-medium">
                Event Title
              </label>
              <Input
                id="event-title"
                value={eventTitle}
                onChange={(e) => setEventTitle(e.target.value)}
                placeholder="Enter event title"
              />
            </div>
            
            <div className="grid gap-2">
              <label htmlFor="event-time" className="text-sm font-medium">
                Time
              </label>
              <Input
                id="event-time"
                type="time"
                value={eventTime}
                onChange={(e) => setEventTime(e.target.value)}
              />
            </div>
            
            <div className="grid gap-2">
              <label htmlFor="event-content" className="text-sm font-medium">
                Description
              </label>
              <Textarea
                id="event-content"
                value={eventContent}
                onChange={(e) => setEventContent(e.target.value)}
                placeholder="Event details..."
                rows={4}
              />
            </div>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsAddingEvent(false)}>
              Cancel
            </Button>
            <Button onClick={handleAddEvent}>
              Add Event
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default CalendarView;
</file>
<file name="radio-group.tsx" path="src\components\ui\radio-group.tsx">
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>
<file name="progress.tsx" path="src\components\ui\progress.tsx">
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>
<file name="popover.tsx" path="src\components\ui\popover.tsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>
<file name="MoodBoard.tsx" path="src\components\moodboard\MoodBoard.tsx">
import React, { useState } from 'react';
import { useNotes } from '@/context/NotesContextTypes';
import { MoodBoardItem } from '@/types';
import { v4 as uuidv4 } from 'uuid';
import { Button } from '@/components/ui/button';

interface MoodBoardProps {
  id: string;
}

const MoodBoard: React.FC<MoodBoardProps> = ({ id }) => {
  const { moodBoards, updateMoodBoard } = useNotes();
  const moodBoard = moodBoards.find(mb => mb.id === id);
  
  const [draggedItem, setDraggedItem] = useState<string | null>(null);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const [isAddingText, setIsAddingText] = useState(false);
  const [newTextContent, setNewTextContent] = useState('');
  const [isAddingImage, setIsAddingImage] = useState(false);
  const [newImageUrl, setNewImageUrl] = useState('');
  
  if (!moodBoard) {
    return (
      <div className="h-full flex items-center justify-center">
        <p>Mood board not found</p>
      </div>
    );
  }
  
  const handleDragStart = (e: React.MouseEvent, itemId: string, position: { x: number, y: number }) => {
    setDraggedItem(itemId);
    
    // Calculate the offset from the pointer to the item's top-left corner
    const rect = e.currentTarget.getBoundingClientRect();
    setDragOffset({
      x: e.clientX - rect.left,
      y: e.clientY - rect.top
    });
  };
  
  const handleDrag = (e: React.MouseEvent) => {
    if (!draggedItem) return;
    
    const newItems = moodBoard.items.map(item => {
      if (item.id === draggedItem) {
        return {
          ...item,
          position: {
            x: e.clientX - dragOffset.x,
            y: e.clientY - dragOffset.y
          }
        };
      }
      return item;
    });
    
    updateMoodBoard(moodBoard.id, { items: newItems });
  };
  
  const handleDragEnd = () => {
    setDraggedItem(null);
  };
  
  const handleMouseMove = (e: React.MouseEvent) => {
    if (draggedItem) {
      handleDrag(e);
    }
  };
  
  const addTextItem = () => {
    if (!newTextContent.trim()) return;
    
    const newItem: MoodBoardItem = {
      id: uuidv4(),
      type: 'text',
      content: newTextContent,
      position: { x: 100, y: 100 }
    };
    
    updateMoodBoard(moodBoard.id, { 
      items: [...moodBoard.items, newItem]
    });
    
    setNewTextContent('');
    setIsAddingText(false);
  };
  
  const addImageItem = () => {
    if (!newImageUrl.trim()) return;
    
    const newItem: MoodBoardItem = {
      id: uuidv4(),
      type: 'image',
      content: newImageUrl,
      position: { x: 200, y: 100 },
      size: { width: 250, height: 150 }
    };
    
    updateMoodBoard(moodBoard.id, { 
      items: [...moodBoard.items, newItem]
    });
    
    setNewImageUrl('');
    setIsAddingImage(false);
  };
  
  const deleteItem = (itemId: string) => {
    updateMoodBoard(moodBoard.id, {
      items: moodBoard.items.filter(item => item.id !== itemId)
    });
  };
  
  return (
    <div 
      className="h-full w-full relative overflow-auto bg-cosmos-deepspace"
      onMouseMove={handleMouseMove}
      onMouseUp={handleDragEnd}
      onMouseLeave={handleDragEnd}
      style={{ minHeight: '600px', minWidth: '100%' }}
    >
      {/* Content container with min-width to ensure space for items */}
      <div className="relative" style={{ minWidth: '100%', minHeight: '100%' }}>
        {/* Background stars */}
        <div className="absolute inset-0 overflow-hidden">
          {[...Array(50)].map((_, i) => (
            <div
              key={i}
              className={`star ${i % 3 === 0 ? 'star-large' : i % 3 === 1 ? 'star-medium' : 'star-small'} animate-twinkle`}
              style={{
                top: `${Math.random() * 100}%`,
                left: `${Math.random() * 100}%`,
                animationDelay: `${Math.random() * 5}s`
              }}
            />
          ))}
        </div>
        
        {/* Board title */}
        <div className="absolute top-4 left-4 z-10">
          <h2 className="text-2xl font-bold">{moodBoard.name}</h2>
        </div>
        
        {/* Control panel */}
        <div className="absolute top-4 right-4 z-10 flex gap-2">
          <Button
            size="sm"
            onClick={() => setIsAddingText(true)}
            className="gap-2"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="4 7 4 4 20 4 20 7"/><line x1="9" y1="20" x2="15" y2="20"/><line x1="12" y1="4" x2="12" y2="20"/></svg>
            Add Text
          </Button>
          <Button
            size="sm"
            onClick={() => setIsAddingImage(true)}
            className="gap-2"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"/><circle cx="8.5" cy="8.5" r="1.5"/><polyline points="21 15 16 10 5 21"/></svg>
            Add Image
          </Button>
        </div>
        
        {/* Mood board items */}
        {moodBoard.items.map(item => (
          <div
            key={item.id}
            className={`absolute cursor-move ${draggedItem === item.id ? 'z-10' : 'z-0'}`}
            style={{
              left: `${item.position.x}px`,
              top: `${item.position.y}px`,
              userSelect: 'none'
            }}
            onMouseDown={(e) => handleDragStart(e, item.id, item.position)}
          >
            {item.type === 'text' ? (
              <div className="bg-card/80 backdrop-blur-sm p-4 rounded-lg shadow-md border border-border min-w-[200px] max-w-[400px]">
                <div className="flex justify-between items-center mb-2">
                  <div className="w-4" />
                  <button 
                    className="p-1 rounded-full hover:bg-secondary/50"
                    onClick={() => deleteItem(item.id)}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/></svg>
                  </button>
                </div>
                <p className="whitespace-pre-wrap">{item.content}</p>
              </div>
            ) : (
              <div className="relative">
                <img
                  src={item.content}
                  alt=""
                  style={{
                    width: item.size?.width ?? 200,
                    height: item.size?.height ?? 'auto'
                  }}
                  className="rounded-lg shadow-lg"
                  onError={(e) => {
                    const target = e.target as HTMLImageElement;
                    target.src = 'https://via.placeholder.com/200x150?text=Image+Error';
                  }}
                />
                <button 
                  className="absolute top-1 right-1 p-1 rounded-full bg-card/80 hover:bg-secondary/50"
                  onClick={() => deleteItem(item.id)}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/></svg>
                </button>
              </div>
            )}
          </div>
        ))}
      </div>
      
      {/* Modal for adding text */}
      {isAddingText && (
        <div className="absolute inset-0 flex items-center justify-center bg-black/50 z-20">
          <div className="bg-card p-6 rounded-lg w-96 max-w-full">
            <h3 className="text-lg font-medium mb-4">Add Text Note</h3>
            <textarea
              value={newTextContent}
              onChange={e => setNewTextContent(e.target.value)}
              placeholder="Enter your text..."
              className="w-full h-32 p-2 bg-muted rounded-md mb-4"
            />
            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={() => setIsAddingText(false)}>
                Cancel
              </Button>
              <Button onClick={addTextItem}>
                Add
              </Button>
            </div>
          </div>
        </div>
      )}
      
      {/* Modal for adding image */}
      {isAddingImage && (
        <div className="absolute inset-0 flex items-center justify-center bg-black/50 z-20">
          <div className="bg-card p-6 rounded-lg w-96 max-w-full">
            <h3 className="text-lg font-medium mb-4">Add Image</h3>
            <input
              type="text"
              value={newImageUrl}
              onChange={e => setNewImageUrl(e.target.value)}
              placeholder="Enter image URL..."
              className="w-full p-2 bg-muted rounded-md mb-4"
            />
            {newImageUrl && (
              <div className="mb-4">
                <img
                  src={newImageUrl}
                  alt="Preview"
                  className="max-h-40 rounded-md mx-auto"
                  onError={(e) => {
                    const target = e.target as HTMLImageElement;
                    target.src = 'https://via.placeholder.com/150?text=Image+Error';
                  }}
                />
              </div>
            )}
            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={() => setIsAddingImage(false)}>
                Cancel
              </Button>
              <Button onClick={addImageItem}>
                Add
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MoodBoard;
</file>
<file name="pagination.tsx" path="src\components\ui\pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>
<file name="navigation-menu.tsx" path="src\components\ui\navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>
<file name="menubar.tsx" path="src\components\ui\menubar.tsx">
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>
<file name="label.tsx" path="src\components\ui\label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>
<file name="input.tsx" path="src\components\ui\input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>
<file name="input-otp.tsx" path="src\components\ui\input-otp.tsx">
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>
<file name="hover-card.tsx" path="src\components\ui\hover-card.tsx">
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>
<file name="select.tsx" path="src\components\ui\select.tsx">
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>
<file name="separator.tsx" path="src\components\ui\separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>
<file name="Sidebar.tsx" path="src\components\layout\Sidebar.tsx">
import React, { useState } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { cn } from '@/lib/utils';
import { 
  FileText, Tag, Star, Image, MessageSquare, 
  Calendar, ChevronLeft, Plus, Settings, ArrowUpRight, 
  LogIn, User, LogOut, UserCircle, Github, FileCode
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/context/AuthContext';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";

interface SidebarProps {
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
}

const Sidebar = ({ isOpen, setIsOpen }: SidebarProps) => {
  const location = useLocation();
  const navigate = useNavigate();
  const { user, signOut, isAuthenticated } = useAuth();
  const [profileMenuOpen, setProfileMenuOpen] = useState(false);
  
  const navItems = [
    { name: 'All Notes', icon: FileText, path: '/' },
    { name: 'Tags', icon: Tag, path: '/tags' },
    { name: 'Constellations', icon: Star, path: '/constellations' },
    { name: 'Mood Board', icon: Image, path: '/mood-board' },
    { name: 'AI Assistant', icon: MessageSquare, path: '/ai-assistant' },
    { name: 'Calendar', icon: Calendar, path: '/calendar' }
  ];

  const handleAuth = () => {
    if (!isAuthenticated) {
      navigate('/auth');
    }
  };

  const handleSignOut = async () => {
    await signOut();
    navigate('/');
  };

  const handleProfileSettings = () => {
    navigate('/settings/profile');
  };

  // Get user initials for avatar
  const getUserInitials = () => {
    if (!user) return '?';
    
    const name = user.user_metadata?.full_name || user.email || '';
    if (!name) return '?';
    
    if (name.includes('@')) {
      // If it's an email, use first letter of email
      return name.substring(0, 1).toUpperCase();
    }
    
    // If it's a name, use initials
    const parts = name.split(' ');
    if (parts.length === 1) return parts[0].substring(0, 1).toUpperCase();
    return (parts[0][0] + parts[parts.length - 1][0]).toUpperCase();
  };

  // Get display name for profile
  const getDisplayName = () => {
    if (!user) return 'Guest';
    
    return user.user_metadata?.full_name || 
           user.user_metadata?.name || 
           user.email?.split('@')[0] || 
           'User';
  };

  // Get authentication method
  const getAuthMethod = () => {
    if (!user) return '';
    
    if (user.app_metadata?.provider === 'github') {
      return 'GitHub';
    } else if (user.email) {
      return 'Email';
    }
    
    return '';
  };

  return (
    <aside
      className={cn(
        "fixed top-0 left-0 z-40 h-screen transition-all duration-300 border-r border-border/30 backdrop-blur-md bg-card/80",
        isOpen ? "w-64" : "w-16"
      )}
    >
      <div className={cn("h-full flex flex-col", !isOpen && "items-center")}>
        <div className="flex items-center justify-between p-4 border-b border-border/30 w-full">
          {isOpen ? (
            <>
              <Link to="/" className="flex items-center space-x-5">
                <div className="w-12 h-12 square-full bg-gradient-to-br from-cosmos-nebula to-cosmos-stardust cosmic-glow flex items-center justify-center">
                  <img src="/logo.png" alt="Notara Logo" className="w-16 h-16 object-cover glow-sm shadow-sm" />
                </div>
                <h2 className="text-2xl font-bold bg-gradient-to-r from-primary to-cosmos-nebula bg-clip-text text-transparent">Notara</h2>
              </Link>
              <Button
                onClick={() => setIsOpen(false)}
                variant="ghost"
                size="icon"
                className="rounded-full hover:bg-secondary/50 transition-colors hover:scale-105"
              >
                <ChevronLeft className="h-5 w-5" />
              </Button>
            </>
          ) : (
            <Button
              onClick={() => setIsOpen(true)}
              variant="ghost"
              size="icon"
              className="rounded-full hover:bg-secondary/50 transition-colors hover:scale-105"
              >
            </Button>
          )}
        </div>
        
        {isOpen ? (
          <div className="p-6">
            <Button
              className="w-full flex items-center justify-center gap-2 py-2 px-4 rounded-md 
                       bg-primary hover:bg-primary/90 transition-all duration-300 btn-glow
                       hover:translate-y-[-2px] hover:shadow-lg"
            >
              <Plus className="w-4 h-4" />
              <span>New Note</span>
            </Button>
          </div>
        ) : (
          <div className="p-3">
            <Button
              className="w-10 h-10 flex items-center justify-center rounded-full 
                       bg-primary hover:bg-primary/90 transition-all duration-300 btn-glow
                       hover:translate-y-[-2px] hover:shadow-lg"
            >
              <Plus className="w-4 h-4" />
            </Button>
          </div>
        )}
        
        <nav className="flex-1 overflow-y-auto px-3 py-2">
          <div className="space-y-1">
            {navItems.map((item) => {
              const isActive = location.pathname === item.path;
              
              return (
                <Link
                  key={item.name}
                  to={item.path}
                  className={cn(
                    "flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-300 hover-grow group",
                    isActive 
                      ? "bg-primary/20 text-primary border-gradient" 
                      : "hover:bg-secondary/30 hover:text-primary",
                    !isOpen && "justify-center px-2"
                  )}
                >
                  <item.icon className={cn(
                    "w-5 h-5 transition-all",
                    isActive ? "text-primary" : "text-muted-foreground group-hover:text-primary"
                  )} />
                  {isOpen && (
                    <span className={cn(
                      "font-medium transition-all",
                      isActive ? "text-primary" : "text-muted-foreground group-hover:text-primary"
                    )}>{item.name}</span>
                  )}
                  
                  {isActive && isOpen && (
                    <div className="ml-auto w-2 h-2 rounded-full bg-primary animate-pulse" />
                  )}
                </Link>
              );
            })}
          </div>

          <div className={cn("mt-6 pt-6 border-t border-border/30", !isOpen && "flex flex-col items-center")}>
            {isOpen && (
              <div className="px-4 py-2 text-xs font-semibold text-muted-foreground uppercase tracking-wider">
                Quick Access
              </div>
            )}
            <Link
              to="/starred"
              className={cn(
                "flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-300 hover:bg-secondary/30 hover:text-primary hover-grow",
                !isOpen && "justify-center px-2"
              )}
            >
              <Star className="w-5 h-5 text-cosmos-solar" />
              {isOpen && <span className="text-muted-foreground group-hover:text-primary">Starred Notes</span>}
            </Link>
            <Link
              to="/settings"
              className={cn(
                "flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-300 hover:bg-secondary/30 hover:text-primary hover-grow",
                !isOpen && "justify-center px-2"
              )}
            >
              <Settings className="w-5 h-5 text-muted-foreground" />
              {isOpen && <span className="text-muted-foreground group-hover:text-primary">Settings</span>}
            </Link>
            <Link
              to="/markdown-cheatsheet"
              className={cn(
                "flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-300 hover:bg-secondary/30 hover:text-primary hover-grow",
                !isOpen && "justify-center px-2",
                location.pathname === '/markdown-cheatsheet' && "bg-primary/20 text-primary border-gradient"
              )}
            >
              <FileCode className={cn(
                "w-5 h-5",
                location.pathname === '/markdown-cheatsheet' ? "text-primary" : "text-muted-foreground"
              )} />
              {isOpen && (
                <span className={cn(
                  "text-muted-foreground group-hover:text-primary",
                  location.pathname === '/markdown-cheatsheet' && "text-primary"
                )}>Markdown Cheatsheet</span>
              )}
            </Link>
          </div>
        </nav>
        
        <div className={cn("p-4 border-t border-border/30", !isOpen && "w-full flex justify-center")}>
          {isAuthenticated ? (
            <DropdownMenu open={profileMenuOpen} onOpenChange={setProfileMenuOpen}>
              <DropdownMenuTrigger asChild>
                <div className={cn(
                  "flex items-center gap-3 p-2 rounded-xl bg-secondary/20 hover:bg-secondary/30 transition-all cursor-pointer glass-card",
                  !isOpen && "justify-center p-2 w-10 h-10"
                )}>
                  <Avatar className="h-10 w-10 cosmic-glow">
                    {user?.user_metadata?.avatar_url ? (
                      <AvatarImage src={user.user_metadata.avatar_url} alt={getDisplayName()} />
                    ) : (
                      <AvatarFallback className="bg-gradient-to-br from-cosmos-nebula via-cosmos-aurora to-cosmos-stardust text-white">
                        {getUserInitials()}
                      </AvatarFallback>
                    )}
                  </Avatar>
                  {isOpen && (
                    <>
                      <div className="flex-1 min-w-0">
                        <div className="font-medium truncate">{getDisplayName()}</div>
                        {user?.email && (
                          <div className="text-xs text-muted-foreground truncate">{user.email}</div>
                        )}
                      </div>
                      <div className="rounded-full p-1 hover:bg-secondary/50 transition-colors">
                        <ArrowUpRight className="h-4 w-4" />
                      </div>
                    </>
                  )}
                </div>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56 backdrop-blur-md bg-card/90 border-border/50">
                <DropdownMenuLabel>
                  <div className="font-medium">Account</div>
                  {getAuthMethod() && (
                    <div className="text-xs text-muted-foreground flex items-center gap-1 mt-1">
                      {getAuthMethod() === 'GitHub' ? (
                        <Github className="h-3 w-3" />
                      ) : (
                        <UserCircle className="h-3 w-3" />
                      )}
                      <span>Signed in with {getAuthMethod()}</span>
                    </div>
                  )}
                </DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={handleProfileSettings} className="cursor-pointer">
                  <UserCircle className="h-4 w-4 mr-2" />
                  <span>Profile Settings</span>
                </DropdownMenuItem>
                <DropdownMenuItem onClick={handleSignOut} className="cursor-pointer text-red-500 focus:text-red-500">
                  <LogOut className="h-4 w-4 mr-2" />
                  <span>Sign Out</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          ) : (
            <Tooltip>
              <TooltipTrigger asChild>
                <div 
                  className={cn(
                    "flex items-center gap-3 p-2 rounded-xl bg-secondary/20 hover:bg-secondary/30 transition-all cursor-pointer glass-card",
                    !isOpen && "justify-center p-2 w-10 h-10"
                  )}
                  onClick={handleAuth}
                >
                  <Avatar className="h-10 w-10">
                    <AvatarFallback className="bg-gradient-to-br from-cosmos-nebula via-cosmos-aurora to-cosmos-stardust text-white">
                      <LogIn className="h-5 w-5" />
                    </AvatarFallback>
                  </Avatar>
                  {isOpen && (
                    <>
                      <div className="flex-1 min-w-0">
                        <div className="font-medium truncate">Sign In</div>
                        <div className="text-xs text-muted-foreground truncate">Access your notes</div>
                      </div>
                      <div className="rounded-full p-1 hover:bg-secondary/50 transition-colors">
                        <LogIn className="h-4 w-4" />
                      </div>
                    </>
                  )}
                </div>
              </TooltipTrigger>
              <TooltipContent>
                <div className="text-sm">Sign in to sync your notes</div>
              </TooltipContent>
            </Tooltip>
          )}
        </div>
      </div>
    </aside>
  );
};

export default Sidebar;
</file>
<file name="sheet.tsx" path="src\components\ui\sheet.tsx">
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}
</file>
<file name="AppLayout.tsx" path="src\components\layout\AppLayout.tsx">
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import Sidebar from './Sidebar';
import ThemeSwitcher from '../ui-custom/ThemeSwitcher';
import { Search, Bell, Settings, Menu } from 'lucide-react';
import { cn } from '@/lib/utils';
import { ResizablePanelGroup, ResizablePanel, ResizableHandle } from '@/components/ui/resizable';
import { Button } from '@/components/ui/button';

interface AppLayoutProps {
  children: React.ReactNode;
}

const AppLayout = ({ children }: AppLayoutProps) => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);

  return (
    <div className="h-screen flex overflow-hidden font-poppins">
      <Sidebar isOpen={isSidebarOpen} setIsOpen={setIsSidebarOpen} />
      
      <main className={cn(
        "flex-1 flex flex-col h-screen overflow-hidden transition-all duration-300",
        isSidebarOpen ? "ml-64" : "ml-0"
      )}>
        <header className="p-3 flex justify-between items-center border-b border-border/40 bg-card/80 backdrop-blur-md">
          <div className="flex items-center">
            {!isSidebarOpen && (
              <Button 
                onClick={() => setIsSidebarOpen(true)}
                variant="ghost"
                size="icon"
                className="mr-4 rounded-full hover:bg-secondary/50 transition-colors hover:scale-105"
              >
                <Menu className="h-5 w-5" />
              </Button>
            )}
          </div>
          
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="icon" className="rounded-full hover:bg-secondary/50 transition-colors hover:scale-105">
              <Search className="h-5 w-5" />
            </Button>
            <Button variant="ghost" size="icon" className="rounded-full hover:bg-secondary/50 transition-colors hover:scale-105">
              <Bell className="h-5 w-5" />
            </Button>
            <Link to="/settings">
              <Button variant="ghost" size="icon" className="rounded-full hover:bg-secondary/50 transition-colors hover:scale-105">
                <Settings className="h-5 w-5" />
              </Button>
            </Link>
            <ThemeSwitcher />
          </div>
        </header>
        
        <div className="flex-1 overflow-hidden">
          <ResizablePanelGroup 
            direction="horizontal" 
            className="h-full animate-fade-in"
          >
            {children}
          </ResizablePanelGroup>
        </div>
      </main>
    </div>
  );
};

export default AppLayout;
</file>
<file name="TagSelector.tsx" path="src\components\notes\TagSelector.tsx">
import React, { useState } from 'react';
import { NoteTag } from '@/types';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';

interface TagSelectorProps {
  selectedTags: NoteTag[];
  onChange: (tags: NoteTag[]) => void;
  availableTags: NoteTag[];
}

const TagSelector: React.FC<TagSelectorProps> = ({
  selectedTags,
  onChange,
  availableTags,
}) => {
  const [isOpen, setIsOpen] = useState(false);

  const toggleTag = (tag: NoteTag) => {
    const isSelected = selectedTags.some(t => t.id === tag.id);
    
    if (isSelected) {
      onChange(selectedTags.filter(t => t.id !== tag.id));
    } else {
      onChange([...selectedTags, tag]);
    }
  };

  return (
    <Popover open={isOpen} onOpenChange={setIsOpen}>
      <PopoverTrigger asChild>
        <button className="px-3 py-1 text-sm rounded-md border border-border flex items-center gap-1">
          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-1"><path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"/><line x1="7" y1="7" x2="7.01" y2="7"/></svg>
          {selectedTags.length === 0
            ? 'Tags'
            : selectedTags.length === 1
            ? `${selectedTags[0].name}`
            : `${selectedTags.length} tags`}
        </button>
      </PopoverTrigger>
      <PopoverContent className="w-80 p-2">
        <div className="space-y-2">
          <h4 className="text-sm font-medium">Select Tags</h4>
          <div className="grid grid-cols-2 gap-2">
            {availableTags.map(tag => {
              const isSelected = selectedTags.some(t => t.id === tag.id);
              
              return (
                <div
                  key={tag.id}
                  className={`p-2 rounded-md cursor-pointer flex items-center transition-colors ${
                    isSelected ? 'bg-secondary' : 'hover:bg-secondary/50'
                  }`}
                  onClick={() => toggleTag(tag)}
                >
                  <div
                    className="w-3 h-3 rounded-full mr-2"
                    style={{ backgroundColor: tag.color }}
                  />
                  <span className="text-sm">{tag.name}</span>
                </div>
              );
            })}
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
};

export default TagSelector;
</file>
<file name="NotesList.tsx" path="src\components\notes\NotesList.tsx">
import React, { useState, useEffect } from 'react';
import { Note } from '@/types';
import { format } from 'date-fns';
import { cn } from '@/lib/utils';

interface NotesListProps {
  notes: Note[];
  activeNoteId: string | null;
  onSelectNote: (note: Note) => void;
  onDeleteNote: (id: string) => void;
}

const NotesList: React.FC<NotesListProps> = ({ 
  notes, 
  activeNoteId, 
  onSelectNote,
  onDeleteNote
}) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredNotes, setFilteredNotes] = useState<Note[]>(notes);

  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredNotes(notes);
    } else {
      const query = searchQuery.toLowerCase();
      setFilteredNotes(notes.filter(note => 
        note.title?.toLowerCase().includes(query) || 
        note.content?.toLowerCase().includes(query) ||
        note.tags.some(tag => tag.name.toLowerCase().includes(query))
      ));
    }
  }, [searchQuery, notes]);
  
  const pinnedNotes = filteredNotes.filter(note => note.isPinned);
  const unpinnedNotes = filteredNotes.filter(note => !note.isPinned);
  
  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
  };

  const handleSearchKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Escape') {
      setSearchQuery('');
    }
  };
  
  const renderNoteItem = (note: Note) => {
    const isActive = activeNoteId === note.id;
    const dateFormatted = format(new Date(note.updatedAt), 'MMM dd, yyyy');
    
    // Get first line as title, or use "Untitled"
    const title = note.title || 'Untitled';
    
    // Get first few words of content for preview
    let preview = '';
    if (note.content) {
      // Remove markdown syntax and get first 60 chars
      preview = note.content
        .replace(/[#*`_[\]]/g, '')
        .substring(0, 60);
      
      if (note.content.length > 60) {
        preview += '...';
      }
    }
    
    return (
      <div 
        key={note.id}
        className={cn(
          "p-4 border-b border-border cursor-pointer transition-colors",
          isActive ? "bg-secondary/30" : "hover:bg-secondary/20"
        )}
        onClick={() => onSelectNote(note)}
      >
        <div className="flex justify-between items-start mb-1">
          <h3 className="font-medium truncate mr-2">{title}</h3>
          <div className="flex items-center">
            {note.isPinned && (
              <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="currentColor" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary mr-2"><path d="M12 3L10 14 14 14 12 21 12 21 14 11 10 11 12 3z" transform="rotate(45, 12, 12)"></path></svg>
            )}
            <button 
              className="p-1 rounded-md opacity-0 group-hover:opacity-100 hover:bg-secondary/50 transition-opacity"
              onClick={(e) => {
                e.stopPropagation();
                onDeleteNote(note.id);
              }}
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
            </button>
          </div>
        </div>
        <p className="text-sm text-muted-foreground truncate mb-2">{preview}</p>
        <div className="flex justify-between items-center">
          <div className="text-xs text-muted-foreground">{dateFormatted}</div>
          <div className="flex gap-1">
            {note.tags.map(tag => (
              <span 
                key={tag.id} 
                className="px-1.5 py-0.5 text-xs rounded-full" 
                style={{ backgroundColor: `${tag.color}30`, color: tag.color }}
              >
                {tag.name}
              </span>
            ))}
          </div>
        </div>
      </div>
    );
  };
  
  return (
    <div className="h-full flex flex-col bg-card border-r border-border">
      <div className="p-4 border-b border-border">
        <div className="relative">
          <input
            type="text"
            placeholder="Search notes..."
            value={searchQuery}
            onChange={handleSearch}
            onKeyDown={handleSearchKeyDown}
            className="w-full py-2 pl-8 pr-4 rounded-md bg-secondary/30 border border-secondary focus:outline-none focus:ring-1 focus:ring-primary"
          />
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className="absolute left-2.5 top-2.5 text-muted-foreground"
          >
            <circle cx="11" cy="11" r="8" />
            <line x1="21" y1="21" x2="16.65" y2="16.65" />
          </svg>
          {searchQuery && (
            <button
              onClick={() => setSearchQuery('')}
              className="absolute right-2.5 top-2.5 text-muted-foreground hover:text-foreground"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
            </button>
          )}
        </div>
      </div>
      
      <div className="flex-1 overflow-y-auto">
        {searchQuery && (
          <div className="px-4 py-2 text-xs font-semibold text-muted-foreground bg-secondary/20 uppercase tracking-wider">
            Search Results: {filteredNotes.length} {filteredNotes.length === 1 ? 'note' : 'notes'}
          </div>
        )}
        
        {!searchQuery && pinnedNotes.length > 0 && (
          <div>
            <div className="px-4 py-2 text-xs font-semibold text-muted-foreground bg-secondary/20 uppercase tracking-wider">
              Pinned
            </div>
            <div className="group">
              {pinnedNotes.map(renderNoteItem)}
            </div>
          </div>
        )}
        
        {!searchQuery && unpinnedNotes.length > 0 && (
          <div>
            {pinnedNotes.length > 0 && (
              <div className="px-4 py-2 text-xs font-semibold text-muted-foreground bg-secondary/20 uppercase tracking-wider">
                Notes
              </div>
            )}
            <div className="group">
              {unpinnedNotes.map(renderNoteItem)}
            </div>
          </div>
        )}
        
        {searchQuery && filteredNotes.length > 0 && (
          <div className="group">
            {filteredNotes.map(renderNoteItem)}
          </div>
        )}
        
        {(filteredNotes.length === 0) && (
          <div className="flex flex-col items-center justify-center h-40 text-muted-foreground">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/></svg>
            <p className="mt-2">{searchQuery ? 'No matching notes' : 'No notes yet'}</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default NotesList;
</file>
<file name="scroll-area.tsx" path="src\components\ui\scroll-area.tsx">
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>
<file name="resizable.tsx" path="src\components\ui\resizable.tsx">
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>
<file name="sonner.tsx" path="src\components\ui\sonner.tsx">
import { useTheme } from "next-themes"
import { Toaster as Sonner, toast } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }
</file>
<file name="slider.tsx" path="src\components\ui\slider.tsx">
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>
<file name="skeleton.tsx" path="src\components\ui\skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>
<file name="sidebar.tsx" path="src\components\ui\sidebar.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>
<file name="switch.tsx" path="src\components\ui\switch.tsx">
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>
<file name="use-toast.ts" path="src\components\ui\use-toast.ts">
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };
</file>
<file name="AiAssistant.tsx" path="src\components\ai\AiAssistant.tsx">
import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { useNotes } from '@/context/NotesContextTypes';
import { toast } from '@/hooks/use-toast';
import { v4 as uuidv4 } from 'uuid';
import { 
  MessageSquare, 
  FileText, 
  Image as ImageIcon, 
  Search, 
  Plus, 
  Check, 
  X 
} from 'lucide-react';

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'ai';
  timestamp: string;
  imageUrl?: string;
}

// Configuration for the Pollinations API
const API_CONFIG = {
  textModel: 'openai-large',
  imageModel: 'flux',
  private: true,
  enhance: true,
  noLogo: true,
  safe: false
};

// System prompt for the AI assistant
const SYSTEM_PROMPT = `You are Notara's AI assistant, designed to help users with their notes and writing.
You can:
1. Answer questions about the user's notes
2. Generate creative content
3. Summarize existing notes
4. Provide writing prompts and suggestions
5. Help organize information

Be concise, helpful, and creative. When generating content, focus on quality and relevance to the user's needs.
If asked to create images, describe what you would generate but don't attempt to create the image yourself - the user will use the image generation button.`;

const AiAssistant: React.FC = () => {
  const { notes, addNote } = useNotes();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: "Hello! I'm your AI assistant for Notara. I can help you with your notes, generate ideas, or answer questions. How can I help you today?",
      sender: 'ai',
      timestamp: new Date().toISOString()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [imagePrompt, setImagePrompt] = useState('');
  const [showImagePrompt, setShowImagePrompt] = useState(false);
  const [imageSize, setImageSize] = useState<{ width: number, height: number }>({ width: 1024, height: 1024 });
  
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Auto-scroll to bottom when messages update
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // Handle sending a message
  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isProcessing) return;
    
    // Add user message
    const userMessage: Message = {
      id: uuidv4(),
      content: inputMessage,
      sender: 'user',
      timestamp: new Date().toISOString()
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);
    setIsProcessing(true);
    
    try {
      // Initialize response message with empty content
      setMessages(prev => [
        ...prev,
        {
          id: uuidv4(),
          content: '',
          sender: 'ai',
          timestamp: new Date().toISOString()
        }
      ]);

      await streamChatCompletion(
        [
          { role: "system", content: SYSTEM_PROMPT },
          ...messages.filter(msg => msg.imageUrl === undefined).map(msg => ({ 
            role: msg.sender === 'user' ? 'user' : 'assistant' as 'user' | 'assistant', 
            content: msg.content 
          })),
          { role: "user", content: inputMessage }
        ],
        handleStreamChunk
      );
    } catch (error) {
      console.error("Error in chat completion:", error);
      
      setMessages(prev => {
        const last = prev[prev.length - 1];
        if (last.sender === 'ai' && last.content === '') {
          return [
            ...prev.slice(0, -1),
            {
              id: uuidv4(),
              content: "I'm sorry, I encountered an error processing your request. Please try again.",
              sender: 'ai',
              timestamp: new Date().toISOString()
            }
          ];
        }
        return [
          ...prev,
          {
            id: uuidv4(),
            content: "I'm sorry, I encountered an error processing your request. Please try again.",
            sender: 'ai',
            timestamp: new Date().toISOString()
          }
        ];
      });
    } finally {
      setIsTyping(false);
      setIsProcessing(false);
    }
  };

  // Handle incoming stream chunks
  const handleStreamChunk = (chunk: string) => {
    setMessages(prev => {
      const lastIndex = prev.length - 1;
      const lastMessage = prev[lastIndex];
      
      // If the last message is from the AI and was just created, append to it
      if (lastMessage && lastMessage.sender === 'ai' && lastMessage.content === '') {
        const updatedMessages = [...prev];
        updatedMessages[lastIndex] = {
          ...lastMessage,
          content: chunk
        };
        return updatedMessages;
      } else if (lastMessage && lastMessage.sender === 'ai') {
        const updatedMessages = [...prev];
        updatedMessages[lastIndex] = {
          ...lastMessage,
          content: lastMessage.content + chunk
        };
        return updatedMessages;
      } else {
        // Otherwise create a new message
        return [
          ...prev,
          {
            id: uuidv4(),
            content: chunk,
            sender: 'ai',
            timestamp: new Date().toISOString()
          }
        ];
      }
    });
  };

  // Stream chat completion from Pollinations API
  const streamChatCompletion = async (messages: Array<{ role: string, content: string }>, onChunkReceived: (chunk: string) => void) => {
    try {
      const payload = {
        model: API_CONFIG.textModel,
        messages: messages,
        private: API_CONFIG.private,
        stream: true,
      };

      const response = await fetch("https://text.pollinations.ai/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "text/event-stream",
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(
          `HTTP error! status: ${response.status}, message: ${errorText}`
        );
      }

      const reader = response.body?.getReader();
      if (!reader) {
        throw new Error("Failed to get reader from response");
      }

      const decoder = new TextDecoder();
      let buffer = "";

      while (true) {
        const { done, value } = await reader.read();
        if (done) {
          console.log("Stream finished.");
          break;
        }

        buffer += decoder.decode(value, { stream: true });

        // Process buffer line by line (SSE format: data: {...}\n\n)
        const lines = buffer.split("\n\n");
        buffer = lines.pop() || ""; // Keep the potentially incomplete last line

        for (const line of lines) {
          if (line.startsWith("data: ")) {
            const dataStr = line.substring(6).trim();
            if (dataStr === "[DONE]") {
              console.log("Received [DONE] marker.");
              continue;
            }
            try {
              const chunk = JSON.parse(dataStr);
              const content = chunk?.choices?.[0]?.delta?.content;
              if (content && onChunkReceived) {
                onChunkReceived(content);
              }
            } catch (e) {
              console.error("Failed to parse stream chunk:", dataStr, e);
            }
          }
        }
      }
    } catch (error) {
      console.error("Error during streaming chat completion:", error);
      throw error;
    }
  };

  // Generate focus prompts
  const handleGenerateFocusPrompt = async () => {
    setIsTyping(true);
    setIsProcessing(true);
    
    try {
      // Initialize response message with empty content
      setMessages(prev => [
        ...prev,
        {
          id: uuidv4(),
          content: '',
          sender: 'ai',
          timestamp: new Date().toISOString()
        }
      ]);

      await streamChatCompletion(
        [
          { role: "system", content: SYSTEM_PROMPT },
          { role: "user", content: "Generate a creative writing prompt to help me focus and get past writer's block. Make it thoughtful and inspiring." }
        ],
        handleStreamChunk
      );
      
      toast({
        title: "Focus Prompt Generated",
        description: "A new writing prompt has been created to help you focus."
      });
    } catch (error) {
      console.error("Error generating focus prompt:", error);
      
      setMessages(prev => {
        const last = prev[prev.length - 1];
        if (last.sender === 'ai' && last.content === '') {
          return [
            ...prev.slice(0, -1),
            {
              id: uuidv4(),
              content: "I'm sorry, I encountered an error generating a focus prompt. Please try again.",
              sender: 'ai',
              timestamp: new Date().toISOString()
            }
          ];
        }
        return [
          ...prev,
          {
            id: uuidv4(),
            content: "I'm sorry, I encountered an error generating a focus prompt. Please try again.",
            sender: 'ai',
            timestamp: new Date().toISOString()
          }
        ];
      });
    } finally {
      setIsTyping(false);
      setIsProcessing(false);
    }
  };

  // Summarize notes
  const handleSummarizeNotes = async () => {
    if (notes.length === 0) {
      toast({
        title: "No notes to summarize",
        description: "You don't have any notes to summarize yet.",
        variant: "destructive"
      });
      return;
    }
    
    setIsTyping(true);
    setIsProcessing(true);
    
    // Create a summary of the notes content
    const notesContent = notes.map(note => 
      `# ${note.title}\n${note.content}`
    ).join('\n\n');
    
    try {
      // Initialize response message with empty content
      setMessages(prev => [
        ...prev,
        {
          id: uuidv4(),
          content: '',
          sender: 'ai',
          timestamp: new Date().toISOString()
        }
      ]);

      await streamChatCompletion(
        [
          { role: "system", content: SYSTEM_PROMPT },
          { role: "user", content: `Here are my notes. Please summarize the key points and main ideas:\n\n${notesContent}` }
        ],
        handleStreamChunk
      );
      
      toast({
        title: "Notes Summarized",
        description: "A summary of your notes has been created."
      });
    } catch (error) {
      console.error("Error summarizing notes:", error);
      
      setMessages(prev => {
        const last = prev[prev.length - 1];
        if (last.sender === 'ai' && last.content === '') {
          return [
            ...prev.slice(0, -1),
            {
              id: uuidv4(),
              content: "I'm sorry, I encountered an error summarizing your notes. Please try again.",
              sender: 'ai',
              timestamp: new Date().toISOString()
            }
          ];
        }
        return [
          ...prev,
          {
            id: uuidv4(),
            content: "I'm sorry, I encountered an error summarizing your notes. Please try again.",
            sender: 'ai',
            timestamp: new Date().toISOString()
          }
        ];
      });
    } finally {
      setIsTyping(false);
      setIsProcessing(false);
    }
  };

  // Save AI response as a note
  const handleSaveAsNote = (content: string) => {
    // Extract a title from the content (first few words)
    const titleMatch = content.match(/^# (.+)$/m) || content.match(/^(.{1,50})\b/);
    const title = titleMatch ? titleMatch[1] : 'AI Generated Note';
    
    // Create a new note
    const newNote = addNote({
      title,
      content,
      isPinned: false,
      tags: []
    });
    
    toast({
      title: "Note Created",
      description: `"${title}" has been added to your notes.`
    });
    
    return newNote;
  };

  // Generate image
  const handleGenerateImage = async () => {
    if (!imagePrompt.trim() || isProcessing) {
      toast({
        title: "No prompt provided",
        description: "Please enter a description for the image you want to generate.",
        variant: "destructive"
      });
      return;
    }
    
    setIsProcessing(true);
    
    try {
      // Create request for image
      const prompt = imagePrompt;
      const { width, height } = imageSize;
      const seed = Math.floor(Math.random() * 1000); // Random seed for each generation
      
      const imageUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(prompt)}?width=${width}&height=${height}&seed=${seed}&noLogo=${API_CONFIG.noLogo}&model=${API_CONFIG.imageModel}`;
      
      // Add image message
      const imageMessage: Message = {
        id: uuidv4(),
        content: `Generated image for prompt: "${prompt}"`,
        sender: 'ai',
        timestamp: new Date().toISOString(),
        imageUrl: imageUrl
      };
      
      setMessages(prev => [...prev, imageMessage]);
      setImagePrompt('');
      setShowImagePrompt(false);
      
      toast({
        title: "Image Generated",
        description: "Your image has been generated."
      });
    } catch (error) {
      console.error("Error generating image:", error);
      
      toast({
        title: "Image Generation Failed",
        description: "There was an error generating your image. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="h-full flex flex-col bg-card relative overflow-hidden">
      {/* Cosmic background effect */}
      <div className="absolute inset-0 pointer-events-none overflow-hidden">
        <div className="absolute top-0 left-0 w-full h-full opacity-30">
          {Array.from({ length: 30 }).map((_, i) => (
            <div 
              key={i}
              className="star absolute animate-pulse"
              style={{
                top: `${Math.random() * 100}%`,
                left: `${Math.random() * 100}%`,
                width: `${Math.random() * 2 + 1}px`,
                height: `${Math.random() * 2 + 1}px`,
                backgroundColor: 'currentColor',
                borderRadius: '50%',
                animationDuration: `${Math.random() * 3 + 1}s`,
              }}
            />
          ))}
        </div>
      </div>
      
      <div className="p-4 border-b border-border/50 backdrop-blur-sm bg-card/30 flex items-center gap-2 z-10">
        <MessageSquare className="w-5 h-5 text-primary" />
        <h2 className="text-xl font-bold">AI Assistant</h2>
        <div className="ml-auto px-2 py-1 text-xs bg-primary/20 rounded-full text-primary font-mono">
          GPT-4.1
        </div>
      </div>
      
      <div className="flex-1 p-4 overflow-y-auto flex flex-col gap-4 z-10" style={{ fontFamily: 'Poppins, sans-serif' }}>
        {messages.map(message => (
          <div
            key={message.id}
            className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'} animate-slide-up`}
          >
            <div
              className={`max-w-[80%] p-3 rounded-lg shadow-lg transition-all duration-300 hover:shadow-xl ${
                message.sender === 'user'
                  ? 'bg-gradient-to-r from-primary to-primary/80 text-white cosmic-glow'
                  : 'bg-secondary/80 backdrop-blur-md text-secondary-foreground'
              }`}
            >
              <div className="prose prose-sm dark:prose-invert">
                {message.content.split('\n').map((line, i) => (
                  <React.Fragment key={i}>
                    {line}
                    {i !== message.content.split('\n').length - 1 && <br />}
                  </React.Fragment>
                ))}
                
                {message.imageUrl && (
                  <div className="mt-3">
                    <img 
                      src={message.imageUrl} 
                      alt="Generated" 
                      className="max-w-full rounded-md shadow-lg border border-border/50"
                    />
                    <div className="flex justify-end mt-2">
                      <a 
                        href={message.imageUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-xs text-primary hover:underline"
                        download
                      >
                        Download Image
                      </a>
                    </div>
                  </div>
                )}
              </div>
              
              {message.sender === 'ai' && message.content && (
                <div className="flex justify-end mt-2 gap-2">
                  <button
                    onClick={() => handleSaveAsNote(message.content)}
                    className="text-xs text-primary/70 hover:text-primary flex items-center gap-1 transition-colors"
                  >
                    <FileText className="w-3 h-3" /> Save as note
                  </button>
                </div>
              )}
            </div>
          </div>
        ))}
        
        {isTyping && (
          <div className="flex justify-start">
            <div className="bg-secondary/80 backdrop-blur-sm text-secondary-foreground px-4 py-2 rounded-lg shadow-lg">
              <div className="flex gap-1">
                <div className="w-2 h-2 rounded-full bg-current animate-pulse" />
                <div className="w-2 h-2 rounded-full bg-current animate-pulse" style={{ animationDelay: '0.2s' }} />
                <div className="w-2 h-2 rounded-full bg-current animate-pulse" style={{ animationDelay: '0.4s' }} />
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>
      
      <div className="p-4 border-t border-border/50 bg-card/70 backdrop-blur-md z-10">
        <div className="flex flex-wrap gap-2 mb-3">
          <Button
            variant="cosmic"
            size="sm"
            onClick={handleGenerateFocusPrompt}
            disabled={isProcessing}
            className="text-xs gap-1 transition-all hover:scale-105 btn-glow"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12 2L7 7.5V13l-2 1.5L10 21.5l5-7 5 7 5-7-5-7 5-7L12 2z"/></svg>
            Generate Focus Prompt
          </Button>
          <Button
            variant="cosmic"
            size="sm"
            onClick={handleSummarizeNotes}
            disabled={isProcessing}
            className="text-xs gap-1 transition-all hover:scale-105 btn-glow"
          >
            <FileText className="w-3 h-3" />
            Summarize Notes
          </Button>
          <Button
            variant="cosmic"
            size="sm"
            onClick={() => setShowImagePrompt(!showImagePrompt)}
            disabled={isProcessing}
            className="text-xs gap-1 transition-all hover:scale-105 btn-glow"
          >
            <ImageIcon className="w-3 h-3" />
            Generate Image
          </Button>
        </div>

        {showImagePrompt && (
          <div className="mb-3 p-3 border border-border/50 rounded-md bg-background/50 backdrop-blur-sm animate-slide-down">
            <div className="flex flex-col gap-2">
              <div className="flex gap-2">
                <Textarea
                  value={imagePrompt}
                  onChange={(e) => setImagePrompt(e.target.value)}
                  placeholder="Describe the image you want to generate..."
                  className="resize-none flex-1 bg-background/50"
                  rows={2}
                />
                <div className="flex flex-col gap-2">
                  <Button
                    onClick={handleGenerateImage}
                    disabled={isProcessing || !imagePrompt.trim()}
                    size="sm"
                    className="cosmic-glow"
                  >
                    <Check className="w-4 h-4" />
                  </Button>
                  <Button
                    onClick={() => setShowImagePrompt(false)}
                    variant="outline"
                    size="sm"
                  >
                    <X className="w-4 h-4" />
                  </Button>
                </div>
              </div>
              <div className="flex gap-4 items-center text-xs">
                <div className="flex gap-2 items-center">
                  <span className="text-muted-foreground">Size:</span>
                  <select 
                    value={`${imageSize.width}x${imageSize.height}`}
                    onChange={(e) => {
                      const [width, height] = e.target.value.split('x').map(Number);
                      setImageSize({ width, height });
                    }}
                    className="bg-background/50 border border-border/50 rounded p-1"
                  >
                    <option value="512x512">512 × 512</option>
                    <option value="768x768">768 × 768</option>
                    <option value="1024x1024">1024 × 1024</option>
                    <option value="1024x768">1024 × 768</option>
                    <option value="768x1024">768 × 1024</option>
                  </select>
                </div>
                <div className="text-muted-foreground">
                  Model: <span className="text-primary font-mono">flux</span>
                </div>
              </div>
            </div>
          </div>
        )}
        
        <div className="flex gap-2">
          <Textarea
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            placeholder="Type your message..."
            className="resize-none bg-background/50 border-border/50 focus:border-primary transition-colors"
            onKeyDown={(e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSendMessage();
              }
            }}
          />
          <Button 
            onClick={handleSendMessage} 
            disabled={isProcessing || !inputMessage.trim()}
            className="cosmic-glow transition-transform hover:scale-105"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="22" y1="2" x2="11" y2="13"/><polygon points="22 2 15 22 11 13 2 9 22 2"/></svg>
          </Button>
        </div>
      </div>
    </div>
  );
};

export default AiAssistant;
</file>
<file name="ConstellationView.tsx" path="src\components\constellation\ConstellationView.tsx">
import React, { useEffect, useRef, useState } from 'react';
import { useNotes } from '@/context/NotesContextTypes';
import { Note, NoteTag } from '@/types';
import { useNavigate } from 'react-router-dom';
import { toast } from '@/hooks/use-toast';

interface NodePosition {
  id: string;
  x: number;
  y: number;
  type: 'note' | 'tag';
  name: string;
  color?: string;
  radius: number;
}

interface Connection {
  source: string;
  target: string;
}

const ConstellationView: React.FC = () => {
  const { notes, tags } = useNotes();
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);
  const [nodes, setNodes] = useState<NodePosition[]>([]);
  const [connections, setConnections] = useState<Connection[]>([]);
  const [hoveredNode, setHoveredNode] = useState<NodePosition | null>(null);
  const [selectedNode, setSelectedNode] = useState<NodePosition | null>(null);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const navigate = useNavigate();
  
  // Setup nodes and connections
  useEffect(() => {
    if (!notes || !tags) return;
    
    const positions: NodePosition[] = [];
    const noteConnections: Connection[] = [];
    
    // Create positions for tags (stars)
    tags.forEach((tag, index) => {
      const angle = (Math.PI * 2) / tags.length * index;
      const radius = Math.min(window.innerWidth, window.innerHeight) / 3;
      
      positions.push({
        id: `tag-${tag.id}`,
        x: Math.cos(angle) * radius + window.innerWidth / 2,
        y: Math.sin(angle) * radius + window.innerHeight / 2,
        type: 'tag',
        name: tag.name,
        color: tag.color,
        radius: 8
      });
    });
    
    // Create positions for notes
    notes.forEach((note, index) => {
      // Find an optimal position for each note based on its tags
      let x = 0;
      let y = 0;
      const connectedTags = note.tags;
      
      if (connectedTags.length > 0) {
        // Position the note as an average of its tags positions
        connectedTags.forEach(tag => {
          const tagNode = positions.find(p => p.id === `tag-${tag.id}`);
          if (tagNode) {
            x += tagNode.x;
            y += tagNode.y;
            
            // Create connection
            noteConnections.push({
              source: `note-${note.id}`,
              target: `tag-${tag.id}`
            });
          }
        });
        
        // Calculate average position with some randomness
        x = x / connectedTags.length + (Math.random() - 0.5) * 100;
        y = y / connectedTags.length + (Math.random() - 0.5) * 100;
      } else {
        // If note has no tags, place it randomly
        x = Math.random() * window.innerWidth * 0.6 + window.innerWidth * 0.2;
        y = Math.random() * window.innerHeight * 0.6 + window.innerHeight * 0.2;
      }
      
      positions.push({
        id: `note-${note.id}`,
        x,
        y,
        type: 'note',
        name: note.title,
        radius: 5
      });
    });
    
    setNodes(positions);
    setConnections(noteConnections);
  }, [notes, tags]);
  
  // Handle canvas rendering
  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas?.getContext('2d');
    if (!canvas || !ctx) return;
    
    // Set canvas size
    const resizeCanvas = () => {
      if (!containerRef.current) return;
      const { width, height } = containerRef.current.getBoundingClientRect();
      canvas.width = width;
      canvas.height = height;
    };
    
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    
    // Animation function
    const animate = () => {
      if (!ctx) return;
      
      // Clear canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Draw connections
      connections.forEach(connection => {
        const source = nodes.find(node => node.id === connection.source);
        const target = nodes.find(node => node.id === connection.target);
        
        if (source && target) {
          ctx.beginPath();
          ctx.moveTo(source.x, source.y);
          ctx.lineTo(target.x, target.y);
          ctx.strokeStyle = 'rgba(255, 255, 255, 0.15)';
          
          // Highlight connections for hovered node
          if (
            hoveredNode && 
            (hoveredNode.id === source.id || hoveredNode.id === target.id)
          ) {
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';
          }
          
          ctx.stroke();
        }
      });
      
      // Draw star field background
      for (let i = 0; i < 100; i++) {
        ctx.fillStyle = `rgba(255, 255, 255, ${Math.random() * 0.5 + 0.1})`;
        ctx.beginPath();
        ctx.arc(
          Math.random() * canvas.width,
          Math.random() * canvas.height,
          Math.random() * 1 + 0.1,
          0,
          Math.PI * 2
        );
        ctx.fill();
      }
      
      // Draw nodes
      nodes.forEach(node => {
        const isHovered = hoveredNode && hoveredNode.id === node.id;
        const isSelected = selectedNode && selectedNode.id === node.id;
        
        ctx.beginPath();
        
        if (node.type === 'tag') {
          // Draw tag as a star
          const color = node.color || '#9b87f5';
          const glow = isHovered || isSelected ? 20 : 10;
          
          ctx.shadowBlur = glow;
          ctx.shadowColor = color;
          ctx.fillStyle = color;
          
          // Draw star shape
          const spikes = 5;
          const outerRadius = node.radius;
          const innerRadius = node.radius / 2;
          
          let rot = (Math.PI / 2) * 3;
          let x = node.x;
          let y = node.y;
          let step = Math.PI / spikes;
          
          ctx.beginPath();
          ctx.moveTo(node.x, node.y - outerRadius);
          
          for (let i = 0; i < spikes; i++) {
            x = node.x + Math.cos(rot) * outerRadius;
            y = node.y + Math.sin(rot) * outerRadius;
            ctx.lineTo(x, y);
            rot += step;
            
            x = node.x + Math.cos(rot) * innerRadius;
            y = node.y + Math.sin(rot) * innerRadius;
            ctx.lineTo(x, y);
            rot += step;
          }
          
          ctx.lineTo(node.x, node.y - outerRadius);
          ctx.closePath();
          ctx.fill();
          
        } else {
          // Draw note as a circle
          ctx.arc(node.x, node.y, node.radius, 0, Math.PI * 2);
          
          if (isHovered || isSelected) {
            ctx.fillStyle = '#9b87f5';
            ctx.shadowBlur = 15;
            ctx.shadowColor = '#9b87f5';
          } else {
            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
          }
        }
        
        ctx.fill();
        ctx.shadowBlur = 0;
        
        // Draw labels
        if (isHovered || isSelected) {
          ctx.font = '12px Arial';
          ctx.fillStyle = '#fff';
          ctx.textAlign = 'center';
          ctx.fillText(node.name, node.x, node.y + node.radius * 2 + 10);
        }
      });
      
      requestAnimationFrame(animate);
    };
    
    animate();
    
    return () => {
      window.removeEventListener('resize', resizeCanvas);
    };
  }, [nodes, connections, hoveredNode, selectedNode]);
  
  // Handle mouse interactions
  const handleMouseMove = (e: React.MouseEvent<HTMLCanvasElement>) => {
    const rect = canvasRef.current?.getBoundingClientRect();
    if (!rect) return;
    
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    setMousePosition({ x, y });
    
    // Detect hover
    const hovered = nodes.find(node => {
      const dx = node.x - x;
      const dy = node.y - y;
      return Math.sqrt(dx * dx + dy * dy) <= node.radius + 5;
    });
    
    setHoveredNode(hovered || null);
  };
  
  const handleClick = () => {
    if (hoveredNode) {
      setSelectedNode(hoveredNode);
      
      // Handle node click based on type
      if (hoveredNode.type === 'note') {
        const noteId = hoveredNode.id.replace('note-', '');
        navigate(`/note/${noteId}`);
      } else if (hoveredNode.type === 'tag') {
        const tagId = hoveredNode.id.replace('tag-', '');
        // Filter notes by tag
        const tagName = hoveredNode.name;
        toast({
          title: `Tag: ${tagName}`,
          description: `Notes with this tag will be highlighted`
        });
      }
    } else {
      setSelectedNode(null);
    }
  };
  
  return (
    <div 
      ref={containerRef} 
      className="w-full h-full relative bg-cosmos-deepspace"
    >
      <canvas
        ref={canvasRef}
        className="w-full h-full"
        onMouseMove={handleMouseMove}
        onClick={handleClick}
      />
      <div className="absolute bottom-4 left-4 text-sm text-muted-foreground">
        <p>Click on stars (tags) or planets (notes) to explore connections</p>
      </div>
    </div>
  );
};

export default ConstellationView;
</file>
<file name="tooltip.tsx" path="src\components\ui\tooltip.tsx">
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>
<file name="toggle.tsx" path="src\components\ui\toggle.tsx">
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>
<file name="toggle-group.tsx" path="src\components\ui\toggle-group.tsx">
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>
<file name="toaster.tsx" path="src\components\ui\toaster.tsx">
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>
<file name="toast.tsx" path="src\components\ui\toast.tsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>
<file name="textarea.tsx" path="src\components\ui\textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>
<file name="tabs.tsx" path="src\components\ui\tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>
<file name="table.tsx" path="src\components\ui\table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>
</project_files>
</context>